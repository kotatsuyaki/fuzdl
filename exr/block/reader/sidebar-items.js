window.SIDEBAR_ITEMS = {"struct":[["AllChunksReader","Decode all chunks in the file without seeking. The decoded chunks can be decompressed by calling `decompress_parallel`, `decompress_sequential`, or `sequential_decompressor` or `parallel_decompressor`. Call `on_progress` to have a callback with each block. Also contains the image meta data."],["FilteredChunksReader","Decode the desired chunks and skip the unimportant chunks in the file. The decoded chunks can be decompressed by calling `decompress_parallel`, `decompress_sequential`, or `sequential_decompressor` or `parallel_decompressor`. Call `on_progress` to have a callback with each block. Also contains the image meta data."],["OnProgressChunksReader","Decode chunks in the file without seeking. Calls the supplied closure for each chunk. The decoded chunks can be decompressed by calling `decompress_parallel`, `decompress_sequential`, or `sequential_decompressor`. Also contains the image meta data."],["ParallelBlockDecompressor","Decompress the chunks in a file in parallel. The first call to `next` will fill the thread pool with jobs, starting to decompress the next few blocks. These jobs will finish, even if you stop reading more blocks. Implements iterator."],["Reader","Decode the meta data from a byte source, keeping the source ready for further reading. Continue decoding the remaining bytes by calling `filtered_chunks` or `all_chunks`."],["SequentialBlockDecompressor","Read all chunks from the file, decompressing each chunk immediately. Implements iterator."]],"trait":[["ChunksReader","Decode chunks in the file. The decoded chunks can be decompressed by calling `decompress_parallel`, `decompress_sequential`, or `sequential_decompressor`. Call `on_progress` to have a callback with each block. Also contains the image meta data."]]};