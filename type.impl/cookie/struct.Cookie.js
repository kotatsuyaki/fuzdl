(function() {var type_impls = {
"fantoccini":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Cookie%3C'c%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#208\">source</a><a href=\"#impl-Cookie%3C'c%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'c&gt; <a class=\"struct\" href=\"cookie/struct.Cookie.html\" title=\"struct cookie::Cookie\">Cookie</a>&lt;'c&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#219-221\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.new\" class=\"fn\">new</a>&lt;N, V&gt;(name: N, value: V) -&gt; <a class=\"struct\" href=\"cookie/struct.Cookie.html\" title=\"struct cookie::Cookie\">Cookie</a>&lt;'c&gt;<span class=\"where fmt-newline\">where\n    N: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'c, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'c, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>Cookie</code> with the given name and value.</p>\n<h5 id=\"example\"><a href=\"#example\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span>cookie = Cookie::new(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(cookie.name_value(), (<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.named\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#248-249\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.named\" class=\"fn\">named</a>&lt;N&gt;(name: N) -&gt; <a class=\"struct\" href=\"cookie/struct.Cookie.html\" title=\"struct cookie::Cookie\">Cookie</a>&lt;'c&gt;<span class=\"where fmt-newline\">where\n    N: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'c, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>Cookie</code> with the given name and an empty value.</p>\n<h5 id=\"example-1\"><a href=\"#example-1\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span>cookie = Cookie::named(<span class=\"string\">&quot;name&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(cookie.name(), <span class=\"string\">&quot;name&quot;</span>);\n<span class=\"macro\">assert!</span>(cookie.value().is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.build\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#265-267\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.build\" class=\"fn\">build</a>&lt;N, V&gt;(name: N, value: V) -&gt; <a class=\"struct\" href=\"cookie/builder/struct.CookieBuilder.html\" title=\"struct cookie::builder::CookieBuilder\">CookieBuilder</a>&lt;'c&gt;<span class=\"where fmt-newline\">where\n    N: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'c, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'c, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>CookieBuilder</code> instance from the given key and value\nstrings.</p>\n<h5 id=\"example-2\"><a href=\"#example-2\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span>c = Cookie::build(<span class=\"string\">&quot;foo&quot;</span>, <span class=\"string\">&quot;bar&quot;</span>).finish();\n<span class=\"macro\">assert_eq!</span>(c.name_value(), (<span class=\"string\">&quot;foo&quot;</span>, <span class=\"string\">&quot;bar&quot;</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.parse\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#284-285\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.parse\" class=\"fn\">parse</a>&lt;S&gt;(s: S) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"cookie/struct.Cookie.html\" title=\"struct cookie::Cookie\">Cookie</a>&lt;'c&gt;, <a class=\"enum\" href=\"cookie/parse/enum.ParseError.html\" title=\"enum cookie::parse::ParseError\">ParseError</a>&gt;<span class=\"where fmt-newline\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'c, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Parses a <code>Cookie</code> from the given HTTP cookie header value string. Does\nnot perform any percent-decoding.</p>\n<h5 id=\"example-3\"><a href=\"#example-3\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span>c = Cookie::parse(<span class=\"string\">&quot;foo=bar%20baz; HttpOnly&quot;</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(c.name_value(), (<span class=\"string\">&quot;foo&quot;</span>, <span class=\"string\">&quot;bar%20baz&quot;</span>));\n<span class=\"macro\">assert_eq!</span>(c.http_only(), <span class=\"prelude-val\">Some</span>(<span class=\"bool-val\">true</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.parse_encoded\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#305-306\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.parse_encoded\" class=\"fn\">parse_encoded</a>&lt;S&gt;(s: S) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"cookie/struct.Cookie.html\" title=\"struct cookie::Cookie\">Cookie</a>&lt;'c&gt;, <a class=\"enum\" href=\"cookie/parse/enum.ParseError.html\" title=\"enum cookie::parse::ParseError\">ParseError</a>&gt;<span class=\"where fmt-newline\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'c, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Parses a <code>Cookie</code> from the given HTTP cookie header value string where\nthe name and value fields are percent-encoded. Percent-decodes the\nname/value fields.</p>\n<h5 id=\"example-4\"><a href=\"#example-4\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span>c = Cookie::parse_encoded(<span class=\"string\">&quot;foo=bar%20baz; HttpOnly&quot;</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(c.name_value(), (<span class=\"string\">&quot;foo&quot;</span>, <span class=\"string\">&quot;bar baz&quot;</span>));\n<span class=\"macro\">assert_eq!</span>(c.http_only(), <span class=\"prelude-val\">Some</span>(<span class=\"bool-val\">true</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_owned\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#323\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.into_owned\" class=\"fn\">into_owned</a>(self) -&gt; <a class=\"struct\" href=\"cookie/struct.Cookie.html\" title=\"struct cookie::Cookie\">Cookie</a>&lt;'static&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code>self</code> into a <code>Cookie</code> with a static lifetime with as few\nallocations as possible.</p>\n<h5 id=\"example-5\"><a href=\"#example-5\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span>c = Cookie::new(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>);\n<span class=\"kw\">let </span>owned_cookie = c.into_owned();\n<span class=\"macro\">assert_eq!</span>(owned_cookie.name_value(), (<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.name\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#349\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.name\" class=\"fn\">name</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\"><p>Returns the name of <code>self</code>.</p>\n<h5 id=\"example-6\"><a href=\"#example-6\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span>c = Cookie::new(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.name(), <span class=\"string\">&quot;name&quot;</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.value\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#364\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.value\" class=\"fn\">value</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\"><p>Returns the value of <code>self</code>.</p>\n<h5 id=\"example-7\"><a href=\"#example-7\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span>c = Cookie::new(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.value(), <span class=\"string\">&quot;value&quot;</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.name_value\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#379\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.name_value\" class=\"fn\">name_value</a>(&amp;self) -&gt; (&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>, &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>)</h4></section></summary><div class=\"docblock\"><p>Returns the name and value of <code>self</code> as a tuple of <code>(name, value)</code>.</p>\n<h5 id=\"example-8\"><a href=\"#example-8\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span>c = Cookie::new(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.name_value(), (<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.http_only\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#411\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.http_only\" class=\"fn\">http_only</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns whether this cookie was marked <code>HttpOnly</code> or not. Returns\n<code>Some(true)</code> when the cookie was explicitly set (manually or parsed) as\n<code>HttpOnly</code>, <code>Some(false)</code> when <code>http_only</code> was manually set to <code>false</code>,\nand <code>None</code> otherwise.</p>\n<h5 id=\"example-9\"><a href=\"#example-9\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span>c = Cookie::parse(<span class=\"string\">&quot;name=value; httponly&quot;</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(c.http_only(), <span class=\"prelude-val\">Some</span>(<span class=\"bool-val\">true</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = Cookie::new(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.http_only(), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = Cookie::new(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.http_only(), <span class=\"prelude-val\">None</span>);\n\n<span class=\"comment\">// An explicitly set &quot;false&quot; value.\n</span>c.set_http_only(<span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(c.http_only(), <span class=\"prelude-val\">Some</span>(<span class=\"bool-val\">false</span>));\n\n<span class=\"comment\">// An explicitly set &quot;true&quot; value.\n</span>c.set_http_only(<span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(c.http_only(), <span class=\"prelude-val\">Some</span>(<span class=\"bool-val\">true</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.secure\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#443\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.secure\" class=\"fn\">secure</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns whether this cookie was marked <code>Secure</code> or not. Returns\n<code>Some(true)</code> when the cookie was explicitly set (manually or parsed) as\n<code>Secure</code>, <code>Some(false)</code> when <code>secure</code> was manually set to <code>false</code>, and\n<code>None</code> otherwise.</p>\n<h5 id=\"example-10\"><a href=\"#example-10\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span>c = Cookie::parse(<span class=\"string\">&quot;name=value; Secure&quot;</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(c.secure(), <span class=\"prelude-val\">Some</span>(<span class=\"bool-val\">true</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = Cookie::parse(<span class=\"string\">&quot;name=value&quot;</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(c.secure(), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = Cookie::new(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.secure(), <span class=\"prelude-val\">None</span>);\n\n<span class=\"comment\">// An explicitly set &quot;false&quot; value.\n</span>c.set_secure(<span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(c.secure(), <span class=\"prelude-val\">Some</span>(<span class=\"bool-val\">false</span>));\n\n<span class=\"comment\">// An explicitly set &quot;true&quot; value.\n</span>c.set_secure(<span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(c.secure(), <span class=\"prelude-val\">Some</span>(<span class=\"bool-val\">true</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.same_site\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#458\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.same_site\" class=\"fn\">same_site</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"cookie/draft/enum.SameSite.html\" title=\"enum cookie::draft::SameSite\">SameSite</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the <code>SameSite</code> attribute of this cookie if one was specified.</p>\n<h5 id=\"example-11\"><a href=\"#example-11\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::{Cookie, SameSite};\n\n<span class=\"kw\">let </span>c = Cookie::parse(<span class=\"string\">&quot;name=value; SameSite=Lax&quot;</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(c.same_site(), <span class=\"prelude-val\">Some</span>(SameSite::Lax));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_age\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#476\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.max_age\" class=\"fn\">max_age</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"time/duration/struct.Duration.html\" title=\"struct time::duration::Duration\">Duration</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the specified max-age of the cookie if one was specified.</p>\n<h5 id=\"example-12\"><a href=\"#example-12\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span>c = Cookie::parse(<span class=\"string\">&quot;name=value&quot;</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(c.max_age(), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>c = Cookie::parse(<span class=\"string\">&quot;name=value; Max-Age=3600&quot;</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(c.max_age().map(|age| age.whole_hours()), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.path\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#497\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.path\" class=\"fn\">path</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the <code>Path</code> of the cookie if one was specified.</p>\n<h5 id=\"example-13\"><a href=\"#example-13\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span>c = Cookie::parse(<span class=\"string\">&quot;name=value&quot;</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(c.path(), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>c = Cookie::parse(<span class=\"string\">&quot;name=value; Path=/&quot;</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(c.path(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;/&quot;</span>));\n\n<span class=\"kw\">let </span>c = Cookie::parse(<span class=\"string\">&quot;name=value; path=/sub&quot;</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(c.path(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;/sub&quot;</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.domain\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#518\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.domain\" class=\"fn\">domain</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the <code>Domain</code> of the cookie if one was specified.</p>\n<h5 id=\"example-14\"><a href=\"#example-14\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span>c = Cookie::parse(<span class=\"string\">&quot;name=value&quot;</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(c.domain(), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>c = Cookie::parse(<span class=\"string\">&quot;name=value; Domain=crates.io&quot;</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(c.domain(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;crates.io&quot;</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.expires\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#545\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.expires\" class=\"fn\">expires</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"cookie/expiration/enum.Expiration.html\" title=\"enum cookie::expiration::Expiration\">Expiration</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the <a href=\"cookie/expiration/enum.Expiration.html\" title=\"enum cookie::expiration::Expiration\"><code>Expiration</code></a> of the cookie if one was specified.</p>\n<h5 id=\"example-15\"><a href=\"#example-15\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::{Cookie, Expiration};\n\n<span class=\"kw\">let </span>c = Cookie::parse(<span class=\"string\">&quot;name=value&quot;</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(c.expires(), <span class=\"prelude-val\">None</span>);\n\n<span class=\"comment\">// Here, `cookie.expires_datetime()` returns `None`.\n</span><span class=\"kw\">let </span>c = Cookie::build(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>).expires(<span class=\"prelude-val\">None</span>).finish();\n<span class=\"macro\">assert_eq!</span>(c.expires(), <span class=\"prelude-val\">Some</span>(Expiration::Session));\n\n<span class=\"kw\">let </span>expire_time = <span class=\"string\">&quot;Wed, 21 Oct 2017 07:28:00 GMT&quot;</span>;\n<span class=\"kw\">let </span>cookie_str = <span class=\"macro\">format!</span>(<span class=\"string\">&quot;name=value; Expires={}&quot;</span>, expire_time);\n<span class=\"kw\">let </span>c = Cookie::parse(cookie_str).unwrap();\n<span class=\"macro\">assert_eq!</span>(c.expires().and_then(|e| e.datetime()).map(|t| t.year()), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2017</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.expires_datetime\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#569\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.expires_datetime\" class=\"fn\">expires_datetime</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"time/offset_date_time/struct.OffsetDateTime.html\" title=\"struct time::offset_date_time::OffsetDateTime\">OffsetDateTime</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the expiration date-time of the cookie if one was specified.</p>\n<h5 id=\"example-16\"><a href=\"#example-16\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span>c = Cookie::parse(<span class=\"string\">&quot;name=value&quot;</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(c.expires_datetime(), <span class=\"prelude-val\">None</span>);\n\n<span class=\"comment\">// Here, `cookie.expires()` returns `Some`.\n</span><span class=\"kw\">let </span>c = Cookie::build(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>).expires(<span class=\"prelude-val\">None</span>).finish();\n<span class=\"macro\">assert_eq!</span>(c.expires_datetime(), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>expire_time = <span class=\"string\">&quot;Wed, 21 Oct 2017 07:28:00 GMT&quot;</span>;\n<span class=\"kw\">let </span>cookie_str = <span class=\"macro\">format!</span>(<span class=\"string\">&quot;name=value; Expires={}&quot;</span>, expire_time);\n<span class=\"kw\">let </span>c = Cookie::parse(cookie_str).unwrap();\n<span class=\"macro\">assert_eq!</span>(c.expires_datetime().map(|t| t.year()), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2017</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_name\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#586\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.set_name\" class=\"fn\">set_name</a>&lt;N&gt;(&amp;mut self, name: N)<span class=\"where fmt-newline\">where\n    N: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'c, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Sets the name of <code>self</code> to <code>name</code>.</p>\n<h5 id=\"example-17\"><a href=\"#example-17\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = Cookie::new(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.name(), <span class=\"string\">&quot;name&quot;</span>);\n\nc.set_name(<span class=\"string\">&quot;foo&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.name(), <span class=\"string\">&quot;foo&quot;</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_value\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#603\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.set_value\" class=\"fn\">set_value</a>&lt;V&gt;(&amp;mut self, value: V)<span class=\"where fmt-newline\">where\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'c, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Sets the value of <code>self</code> to <code>value</code>.</p>\n<h5 id=\"example-18\"><a href=\"#example-18\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = Cookie::new(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.value(), <span class=\"string\">&quot;value&quot;</span>);\n\nc.set_value(<span class=\"string\">&quot;bar&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.value(), <span class=\"string\">&quot;bar&quot;</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_http_only\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#628\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.set_http_only\" class=\"fn\">set_http_only</a>&lt;T&gt;(&amp;mut self, value: T)<span class=\"where fmt-newline\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>&gt;&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Sets the value of <code>http_only</code> in <code>self</code> to <code>value</code>.  If <code>value</code> is\n<code>None</code>, the field is unset.</p>\n<h5 id=\"example-19\"><a href=\"#example-19\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = Cookie::new(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.http_only(), <span class=\"prelude-val\">None</span>);\n\nc.set_http_only(<span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(c.http_only(), <span class=\"prelude-val\">Some</span>(<span class=\"bool-val\">true</span>));\n\nc.set_http_only(<span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(c.http_only(), <span class=\"prelude-val\">Some</span>(<span class=\"bool-val\">false</span>));\n\nc.set_http_only(<span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(c.http_only(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_secure\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#653\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.set_secure\" class=\"fn\">set_secure</a>&lt;T&gt;(&amp;mut self, value: T)<span class=\"where fmt-newline\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>&gt;&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Sets the value of <code>secure</code> in <code>self</code> to <code>value</code>. If <code>value</code> is <code>None</code>,\nthe field is unset.</p>\n<h5 id=\"example-20\"><a href=\"#example-20\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = Cookie::new(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.secure(), <span class=\"prelude-val\">None</span>);\n\nc.set_secure(<span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(c.secure(), <span class=\"prelude-val\">Some</span>(<span class=\"bool-val\">true</span>));\n\nc.set_secure(<span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(c.secure(), <span class=\"prelude-val\">Some</span>(<span class=\"bool-val\">false</span>));\n\nc.set_secure(<span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(c.secure(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_same_site\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#692\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.set_same_site\" class=\"fn\">set_same_site</a>&lt;T&gt;(&amp;mut self, value: T)<span class=\"where fmt-newline\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"cookie/draft/enum.SameSite.html\" title=\"enum cookie::draft::SameSite\">SameSite</a>&gt;&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Sets the value of <code>same_site</code> in <code>self</code> to <code>value</code>. If <code>value</code> is\n<code>None</code>, the field is unset. If <code>value</code> is <code>SameSite::None</code>, the โSecureโ\nflag will be set when the cookie is written out unless <code>secure</code> is\nexplicitly set to <code>false</code> via <a href=\"cookie/struct.Cookie.html#method.set_secure\" title=\"method cookie::Cookie::set_secure\"><code>Cookie::set_secure()</code></a> or the equivalent\nbuilder method.</p>\n<h5 id=\"example-21\"><a href=\"#example-21\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::{Cookie, SameSite};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = Cookie::new(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.same_site(), <span class=\"prelude-val\">None</span>);\n\nc.set_same_site(SameSite::None);\n<span class=\"macro\">assert_eq!</span>(c.same_site(), <span class=\"prelude-val\">Some</span>(SameSite::None));\n<span class=\"macro\">assert_eq!</span>(c.to_string(), <span class=\"string\">&quot;name=value; SameSite=None; Secure&quot;</span>);\n\nc.set_secure(<span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(c.to_string(), <span class=\"string\">&quot;name=value; SameSite=None&quot;</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = Cookie::new(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.same_site(), <span class=\"prelude-val\">None</span>);\n\nc.set_same_site(SameSite::Strict);\n<span class=\"macro\">assert_eq!</span>(c.same_site(), <span class=\"prelude-val\">Some</span>(SameSite::Strict));\n<span class=\"macro\">assert_eq!</span>(c.to_string(), <span class=\"string\">&quot;name=value; SameSite=Strict&quot;</span>);\n\nc.set_same_site(<span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(c.same_site(), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(c.to_string(), <span class=\"string\">&quot;name=value&quot;</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_max_age\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#718\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.set_max_age\" class=\"fn\">set_max_age</a>&lt;D&gt;(&amp;mut self, value: D)<span class=\"where fmt-newline\">where\n    D: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"time/duration/struct.Duration.html\" title=\"struct time::duration::Duration\">Duration</a>&gt;&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Sets the value of <code>max_age</code> in <code>self</code> to <code>value</code>. If <code>value</code> is <code>None</code>,\nthe field is unset.</p>\n<h5 id=\"example-22\"><a href=\"#example-22\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n<span class=\"kw\">use </span>cookie::time::Duration;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = Cookie::new(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.max_age(), <span class=\"prelude-val\">None</span>);\n\nc.set_max_age(Duration::hours(<span class=\"number\">10</span>));\n<span class=\"macro\">assert_eq!</span>(c.max_age(), <span class=\"prelude-val\">Some</span>(Duration::hours(<span class=\"number\">10</span>)));\n\nc.set_max_age(<span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert!</span>(c.max_age().is_none());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_path\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#735\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.set_path\" class=\"fn\">set_path</a>&lt;P&gt;(&amp;mut self, path: P)<span class=\"where fmt-newline\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'c, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Sets the <code>path</code> of <code>self</code> to <code>path</code>.</p>\n<h5 id=\"example-23\"><a href=\"#example-23\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = Cookie::new(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.path(), <span class=\"prelude-val\">None</span>);\n\nc.set_path(<span class=\"string\">&quot;/&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.path(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;/&quot;</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unset_path\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#755\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.unset_path\" class=\"fn\">unset_path</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Unsets the <code>path</code> of <code>self</code>.</p>\n<h5 id=\"example-24\"><a href=\"#example-24\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = Cookie::new(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.path(), <span class=\"prelude-val\">None</span>);\n\nc.set_path(<span class=\"string\">&quot;/&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.path(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;/&quot;</span>));\n\nc.unset_path();\n<span class=\"macro\">assert_eq!</span>(c.path(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_domain\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#772\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.set_domain\" class=\"fn\">set_domain</a>&lt;D&gt;(&amp;mut self, domain: D)<span class=\"where fmt-newline\">where\n    D: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'c, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Sets the <code>domain</code> of <code>self</code> to <code>domain</code>.</p>\n<h5 id=\"example-25\"><a href=\"#example-25\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = Cookie::new(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.domain(), <span class=\"prelude-val\">None</span>);\n\nc.set_domain(<span class=\"string\">&quot;rust-lang.org&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.domain(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;rust-lang.org&quot;</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unset_domain\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#792\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.unset_domain\" class=\"fn\">unset_domain</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Unsets the <code>domain</code> of <code>self</code>.</p>\n<h5 id=\"example-26\"><a href=\"#example-26\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = Cookie::new(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.domain(), <span class=\"prelude-val\">None</span>);\n\nc.set_domain(<span class=\"string\">&quot;rust-lang.org&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.domain(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;rust-lang.org&quot;</span>));\n\nc.unset_domain();\n<span class=\"macro\">assert_eq!</span>(c.domain(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_expires\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#818\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.set_expires\" class=\"fn\">set_expires</a>&lt;T&gt;(&amp;mut self, time: T)<span class=\"where fmt-newline\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"cookie/expiration/enum.Expiration.html\" title=\"enum cookie::expiration::Expiration\">Expiration</a>&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Sets the expires field of <code>self</code> to <code>time</code>. If <code>time</code> is <code>None</code>, an\nexpiration of <a href=\"cookie/expiration/enum.Expiration.html#variant.Session\" title=\"variant cookie::expiration::Expiration::Session\"><code>Session</code></a> is set.</p>\n<h5 id=\"example-27\"><a href=\"#example-27\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::{Cookie, Expiration};\n<span class=\"kw\">use </span>cookie::time::{Duration, OffsetDateTime};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = Cookie::new(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.expires(), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>now = OffsetDateTime::now_utc();\nnow += Duration::weeks(<span class=\"number\">52</span>);\n\nc.set_expires(now);\n<span class=\"macro\">assert!</span>(c.expires().is_some());\n\nc.set_expires(<span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(c.expires(), <span class=\"prelude-val\">Some</span>(Expiration::Session));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unset_expires\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#842\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.unset_expires\" class=\"fn\">unset_expires</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Unsets the <code>expires</code> of <code>self</code>.</p>\n<h5 id=\"example-28\"><a href=\"#example-28\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::{Cookie, Expiration};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = Cookie::new(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.expires(), <span class=\"prelude-val\">None</span>);\n\nc.set_expires(<span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(c.expires(), <span class=\"prelude-val\">Some</span>(Expiration::Session));\n\nc.unset_expires();\n<span class=\"macro\">assert_eq!</span>(c.expires(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.make_permanent\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#866\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.make_permanent\" class=\"fn\">make_permanent</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Makes <code>self</code> a โpermanentโ cookie by extending its expiration and max\nage 20 years into the future.</p>\n<h5 id=\"example-29\"><a href=\"#example-29\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n<span class=\"kw\">use </span>cookie::time::Duration;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = Cookie::new(<span class=\"string\">&quot;foo&quot;</span>, <span class=\"string\">&quot;bar&quot;</span>);\n<span class=\"macro\">assert!</span>(c.expires().is_none());\n<span class=\"macro\">assert!</span>(c.max_age().is_none());\n\nc.make_permanent();\n<span class=\"macro\">assert!</span>(c.expires().is_some());\n<span class=\"macro\">assert_eq!</span>(c.max_age(), <span class=\"prelude-val\">Some</span>(Duration::days(<span class=\"number\">365 </span>* <span class=\"number\">20</span>)));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.make_removal\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#893\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.make_removal\" class=\"fn\">make_removal</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Make <code>self</code> a โremovalโ cookie by clearing its value, setting a max-age\nof <code>0</code>, and setting an expiration date far in the past.</p>\n<h5 id=\"example-30\"><a href=\"#example-30\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n<span class=\"kw\">use </span>cookie::time::Duration;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = Cookie::new(<span class=\"string\">&quot;foo&quot;</span>, <span class=\"string\">&quot;bar&quot;</span>);\nc.make_permanent();\n<span class=\"macro\">assert_eq!</span>(c.max_age(), <span class=\"prelude-val\">Some</span>(Duration::days(<span class=\"number\">365 </span>* <span class=\"number\">20</span>)));\n<span class=\"macro\">assert_eq!</span>(c.value(), <span class=\"string\">&quot;bar&quot;</span>);\n\nc.make_removal();\n<span class=\"macro\">assert_eq!</span>(c.value(), <span class=\"string\">&quot;&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.max_age(), <span class=\"prelude-val\">Some</span>(Duration::ZERO));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.name_raw\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#961\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.name_raw\" class=\"fn\">name_raw</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'c <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the name of <code>self</code> as a string slice of the raw string <code>self</code>\nwas originally parsed from. If <code>self</code> was not originally parsed from a\nraw string, returns <code>None</code>.</p>\n<p>This method differs from <a href=\"cookie/struct.Cookie.html#method.name\" title=\"method cookie::Cookie::name\"><code>Cookie::name()</code></a> in that it returns a string\nwith the same lifetime as the originally parsed string. This lifetime\nmay outlive <code>self</code>. If a longer lifetime is not required, or youโre\nunsure if you need a longer lifetime, use <a href=\"cookie/struct.Cookie.html#method.name\" title=\"method cookie::Cookie::name\"><code>Cookie::name()</code></a>.</p>\n<h5 id=\"example-31\"><a href=\"#example-31\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span>cookie_string = <span class=\"macro\">format!</span>(<span class=\"string\">&quot;{}={}&quot;</span>, <span class=\"string\">&quot;foo&quot;</span>, <span class=\"string\">&quot;bar&quot;</span>);\n\n<span class=\"comment\">// `c` will be dropped at the end of the scope, but `name` will live on\n</span><span class=\"kw\">let </span>name = {\n    <span class=\"kw\">let </span>c = Cookie::parse(cookie_string.as_str()).unwrap();\n    c.name_raw()\n};\n\n<span class=\"macro\">assert_eq!</span>(name, <span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;foo&quot;</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.value_raw\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#991\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.value_raw\" class=\"fn\">value_raw</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'c <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the value of <code>self</code> as a string slice of the raw string <code>self</code>\nwas originally parsed from. If <code>self</code> was not originally parsed from a\nraw string, returns <code>None</code>.</p>\n<p>This method differs from <a href=\"cookie/struct.Cookie.html#method.value\" title=\"method cookie::Cookie::value\"><code>Cookie::value()</code></a> in that it returns a\nstring with the same lifetime as the originally parsed string. This\nlifetime may outlive <code>self</code>. If a longer lifetime is not required, or\nyouโre unsure if you need a longer lifetime, use <a href=\"cookie/struct.Cookie.html#method.value\" title=\"method cookie::Cookie::value\"><code>Cookie::value()</code></a>.</p>\n<h5 id=\"example-32\"><a href=\"#example-32\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span>cookie_string = <span class=\"macro\">format!</span>(<span class=\"string\">&quot;{}={}&quot;</span>, <span class=\"string\">&quot;foo&quot;</span>, <span class=\"string\">&quot;bar&quot;</span>);\n\n<span class=\"comment\">// `c` will be dropped at the end of the scope, but `value` will live on\n</span><span class=\"kw\">let </span>value = {\n    <span class=\"kw\">let </span>c = Cookie::parse(cookie_string.as_str()).unwrap();\n    c.value_raw()\n};\n\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;bar&quot;</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.path_raw\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#1022\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.path_raw\" class=\"fn\">path_raw</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'c <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the <code>Path</code> of <code>self</code> as a string slice of the raw string <code>self</code>\nwas originally parsed from. If <code>self</code> was not originally parsed from a\nraw string, or if <code>self</code> doesnโt contain a <code>Path</code>, or if the <code>Path</code> has\nchanged since parsing, returns <code>None</code>.</p>\n<p>This method differs from <a href=\"cookie/struct.Cookie.html#method.path\" title=\"method cookie::Cookie::path\"><code>Cookie::path()</code></a> in that it returns a\nstring with the same lifetime as the originally parsed string. This\nlifetime may outlive <code>self</code>. If a longer lifetime is not required, or\nyouโre unsure if you need a longer lifetime, use <a href=\"cookie/struct.Cookie.html#method.path\" title=\"method cookie::Cookie::path\"><code>Cookie::path()</code></a>.</p>\n<h5 id=\"example-33\"><a href=\"#example-33\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span>cookie_string = <span class=\"macro\">format!</span>(<span class=\"string\">&quot;{}={}; Path=/&quot;</span>, <span class=\"string\">&quot;foo&quot;</span>, <span class=\"string\">&quot;bar&quot;</span>);\n\n<span class=\"comment\">// `c` will be dropped at the end of the scope, but `path` will live on\n</span><span class=\"kw\">let </span>path = {\n    <span class=\"kw\">let </span>c = Cookie::parse(cookie_string.as_str()).unwrap();\n    c.path_raw()\n};\n\n<span class=\"macro\">assert_eq!</span>(path, <span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;/&quot;</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.domain_raw\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#1056\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.domain_raw\" class=\"fn\">domain_raw</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'c <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the <code>Domain</code> of <code>self</code> as a string slice of the raw string\n<code>self</code> was originally parsed from. If <code>self</code> was not originally parsed\nfrom a raw string, or if <code>self</code> doesnโt contain a <code>Domain</code>, or if the\n<code>Domain</code> has changed since parsing, returns <code>None</code>.</p>\n<p>This method differs from <a href=\"cookie/struct.Cookie.html#method.domain\" title=\"method cookie::Cookie::domain\"><code>Cookie::domain()</code></a> in that it returns a\nstring with the same lifetime as the originally parsed string. This\nlifetime may outlive <code>self</code> struct. If a longer lifetime is not\nrequired, or youโre unsure if you need a longer lifetime, use\n<a href=\"cookie/struct.Cookie.html#method.domain\" title=\"method cookie::Cookie::domain\"><code>Cookie::domain()</code></a>.</p>\n<h5 id=\"example-34\"><a href=\"#example-34\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span>cookie_string = <span class=\"macro\">format!</span>(<span class=\"string\">&quot;{}={}; Domain=crates.io&quot;</span>, <span class=\"string\">&quot;foo&quot;</span>, <span class=\"string\">&quot;bar&quot;</span>);\n\n<span class=\"comment\">//`c` will be dropped at the end of the scope, but `domain` will live on\n</span><span class=\"kw\">let </span>domain = {\n    <span class=\"kw\">let </span>c = Cookie::parse(cookie_string.as_str()).unwrap();\n    c.domain_raw()\n};\n\n<span class=\"macro\">assert_eq!</span>(domain, <span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;crates.io&quot;</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encoded\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#1082\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.encoded\" class=\"fn\">encoded</a>&lt;'a&gt;(&amp;'a self) -&gt; <a class=\"struct\" href=\"cookie/struct.Display.html\" title=\"struct cookie::Display\">Display</a>&lt;'a, 'c&gt;</h4></section></summary><div class=\"docblock\"><p>Wraps <code>self</code> in an encoded <a href=\"cookie/struct.Display.html\" title=\"struct cookie::Display\"><code>Display</code></a>: a cost-free wrapper around\n<code>Cookie</code> whose <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\"><code>fmt::Display</code></a> implementation percent-encodes the name\nand value of the wrapped <code>Cookie</code>.</p>\n<p>The returned structure can be chained with <a href=\"cookie/struct.Display.html#method.stripped\" title=\"method cookie::Display::stripped\"><code>Display::stripped()</code></a> to\ndisplay only the name and value.</p>\n<h5 id=\"example-35\"><a href=\"#example-35\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = Cookie::build(<span class=\"string\">&quot;my name&quot;</span>, <span class=\"string\">&quot;this; value?&quot;</span>).secure(<span class=\"bool-val\">true</span>).finish();\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>c.encoded().to_string(), <span class=\"string\">&quot;my%20name=this%3B%20value%3F; Secure&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>c.encoded().stripped().to_string(), <span class=\"string\">&quot;my%20name=this%3B%20value%3F&quot;</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.stripped\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#1106\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.stripped\" class=\"fn\">stripped</a>&lt;'a&gt;(&amp;'a self) -&gt; <a class=\"struct\" href=\"cookie/struct.Display.html\" title=\"struct cookie::Display\">Display</a>&lt;'a, 'c&gt;</h4></section></summary><div class=\"docblock\"><p>Wraps <code>self</code> in a stripped <code>Display</code>]: a cost-free wrapper around\n<code>Cookie</code> whose <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\"><code>fmt::Display</code></a> implementation prints only the <code>name</code>\nand <code>value</code> of the wrapped <code>Cookie</code>.</p>\n<p>The returned structure can be chained with <a href=\"cookie/struct.Display.html#method.encoded\" title=\"method cookie::Display::encoded\"><code>Display::encoded()</code></a> to\nencode the name and value.</p>\n<h5 id=\"example-36\"><a href=\"#example-36\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = Cookie::build(<span class=\"string\">&quot;key?&quot;</span>, <span class=\"string\">&quot;value&quot;</span>).secure(<span class=\"bool-val\">true</span>).path(<span class=\"string\">&quot;/&quot;</span>).finish();\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>c.stripped().to_string(), <span class=\"string\">&quot;key?=value&quot;</span>);\n<span class=\"comment\">// Note: `encoded()` is only available when `percent-encode` is enabled.\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>c.stripped().encoded().to_string(), <span class=\"string\">&quot;key%3F=value&quot;</span>);</code></pre></div>\n</div></details></div></details>",0,"fantoccini::cookies::Cookie"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Cookie%3C'c%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#183\">source</a><a href=\"#impl-Debug-for-Cookie%3C'c%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'c&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"cookie/struct.Cookie.html\" title=\"struct cookie::Cookie\">Cookie</a>&lt;'c&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#183\">source</a><a href=\"#method.fmt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","fantoccini::cookies::Cookie"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Cookie%3C'c%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#183\">source</a><a href=\"#impl-Clone-for-Cookie%3C'c%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'c&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"cookie/struct.Cookie.html\" title=\"struct cookie::Cookie\">Cookie</a>&lt;'c&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#183\">source</a><a href=\"#method.clone\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"cookie/struct.Cookie.html\" title=\"struct cookie::Cookie\">Cookie</a>&lt;'c&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","fantoccini::cookies::Cookie"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-Cookie%3C'c%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#1213\">source</a><a href=\"#impl-Display-for-Cookie%3C'c%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'c&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"struct\" href=\"cookie/struct.Cookie.html\" title=\"struct cookie::Cookie\">Cookie</a>&lt;'c&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#1230\">source</a><a href=\"#method.fmt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Formats the cookie <code>self</code> as a <code>Set-Cookie</code> header value.</p>\n<p>Does <em>not</em> percent-encode any values. To percent-encode, use\n<a href=\"cookie/struct.Cookie.html#method.encoded\" title=\"method cookie::Cookie::encoded\"><code>Cookie::encoded()</code></a>.</p>\n<h5 id=\"example\"><a href=\"#example\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>cookie = Cookie::build(<span class=\"string\">&quot;foo&quot;</span>, <span class=\"string\">&quot;bar&quot;</span>)\n    .path(<span class=\"string\">&quot;/&quot;</span>)\n    .finish();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>cookie.to_string(), <span class=\"string\">&quot;foo=bar; Path=/&quot;</span>);</code></pre></div>\n</div></details></div></details>","Display","fantoccini::cookies::Cookie"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-Cookie%3C'static%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#1236\">source</a><a href=\"#impl-FromStr-for-Cookie%3C'static%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/str/traits/trait.FromStr.html\" title=\"trait core::str::traits::FromStr\">FromStr</a> for <a class=\"struct\" href=\"cookie/struct.Cookie.html\" title=\"struct cookie::Cookie\">Cookie</a>&lt;'static&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/str/traits/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"enum\" href=\"cookie/parse/enum.ParseError.html\" title=\"enum cookie::parse::ParseError\">ParseError</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#1239\">source</a><a href=\"#method.from_str\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/str/traits/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"cookie/struct.Cookie.html\" title=\"struct cookie::Cookie\">Cookie</a>&lt;'static&gt;, <a class=\"enum\" href=\"cookie/parse/enum.ParseError.html\" title=\"enum cookie::parse::ParseError\">ParseError</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"https://doc.rust-lang.org/1.75.0/core/str/traits/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","fantoccini::cookies::Cookie"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CCookie%3C'b%3E%3E-for-Cookie%3C'a%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#1244\">source</a><a href=\"#impl-PartialEq%3CCookie%3C'b%3E%3E-for-Cookie%3C'a%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"cookie/struct.Cookie.html\" title=\"struct cookie::Cookie\">Cookie</a>&lt;'b&gt;&gt; for <a class=\"struct\" href=\"cookie/struct.Cookie.html\" title=\"struct cookie::Cookie\">Cookie</a>&lt;'a&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#1245\">source</a><a href=\"#method.eq\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"cookie/struct.Cookie.html\" title=\"struct cookie::Cookie\">Cookie</a>&lt;'b&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<Cookie<'b>>","fantoccini::cookies::Cookie"]],
"thirtyfour":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Cookie%3C'c%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#208\">source</a><a href=\"#impl-Cookie%3C'c%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'c&gt; <a class=\"struct\" href=\"cookie/struct.Cookie.html\" title=\"struct cookie::Cookie\">Cookie</a>&lt;'c&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#219-221\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.new\" class=\"fn\">new</a>&lt;N, V&gt;(name: N, value: V) -&gt; <a class=\"struct\" href=\"cookie/struct.Cookie.html\" title=\"struct cookie::Cookie\">Cookie</a>&lt;'c&gt;<span class=\"where fmt-newline\">where\n    N: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'c, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'c, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>Cookie</code> with the given name and value.</p>\n<h5 id=\"example\"><a href=\"#example\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span>cookie = Cookie::new(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(cookie.name_value(), (<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.named\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#248-249\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.named\" class=\"fn\">named</a>&lt;N&gt;(name: N) -&gt; <a class=\"struct\" href=\"cookie/struct.Cookie.html\" title=\"struct cookie::Cookie\">Cookie</a>&lt;'c&gt;<span class=\"where fmt-newline\">where\n    N: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'c, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>Cookie</code> with the given name and an empty value.</p>\n<h5 id=\"example-1\"><a href=\"#example-1\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span>cookie = Cookie::named(<span class=\"string\">&quot;name&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(cookie.name(), <span class=\"string\">&quot;name&quot;</span>);\n<span class=\"macro\">assert!</span>(cookie.value().is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.build\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#265-267\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.build\" class=\"fn\">build</a>&lt;N, V&gt;(name: N, value: V) -&gt; <a class=\"struct\" href=\"cookie/builder/struct.CookieBuilder.html\" title=\"struct cookie::builder::CookieBuilder\">CookieBuilder</a>&lt;'c&gt;<span class=\"where fmt-newline\">where\n    N: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'c, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'c, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>CookieBuilder</code> instance from the given key and value\nstrings.</p>\n<h5 id=\"example-2\"><a href=\"#example-2\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span>c = Cookie::build(<span class=\"string\">&quot;foo&quot;</span>, <span class=\"string\">&quot;bar&quot;</span>).finish();\n<span class=\"macro\">assert_eq!</span>(c.name_value(), (<span class=\"string\">&quot;foo&quot;</span>, <span class=\"string\">&quot;bar&quot;</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.parse\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#284-285\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.parse\" class=\"fn\">parse</a>&lt;S&gt;(s: S) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"cookie/struct.Cookie.html\" title=\"struct cookie::Cookie\">Cookie</a>&lt;'c&gt;, <a class=\"enum\" href=\"cookie/parse/enum.ParseError.html\" title=\"enum cookie::parse::ParseError\">ParseError</a>&gt;<span class=\"where fmt-newline\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'c, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Parses a <code>Cookie</code> from the given HTTP cookie header value string. Does\nnot perform any percent-decoding.</p>\n<h5 id=\"example-3\"><a href=\"#example-3\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span>c = Cookie::parse(<span class=\"string\">&quot;foo=bar%20baz; HttpOnly&quot;</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(c.name_value(), (<span class=\"string\">&quot;foo&quot;</span>, <span class=\"string\">&quot;bar%20baz&quot;</span>));\n<span class=\"macro\">assert_eq!</span>(c.http_only(), <span class=\"prelude-val\">Some</span>(<span class=\"bool-val\">true</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.parse_encoded\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#305-306\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.parse_encoded\" class=\"fn\">parse_encoded</a>&lt;S&gt;(s: S) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"cookie/struct.Cookie.html\" title=\"struct cookie::Cookie\">Cookie</a>&lt;'c&gt;, <a class=\"enum\" href=\"cookie/parse/enum.ParseError.html\" title=\"enum cookie::parse::ParseError\">ParseError</a>&gt;<span class=\"where fmt-newline\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'c, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Parses a <code>Cookie</code> from the given HTTP cookie header value string where\nthe name and value fields are percent-encoded. Percent-decodes the\nname/value fields.</p>\n<h5 id=\"example-4\"><a href=\"#example-4\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span>c = Cookie::parse_encoded(<span class=\"string\">&quot;foo=bar%20baz; HttpOnly&quot;</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(c.name_value(), (<span class=\"string\">&quot;foo&quot;</span>, <span class=\"string\">&quot;bar baz&quot;</span>));\n<span class=\"macro\">assert_eq!</span>(c.http_only(), <span class=\"prelude-val\">Some</span>(<span class=\"bool-val\">true</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_owned\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#323\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.into_owned\" class=\"fn\">into_owned</a>(self) -&gt; <a class=\"struct\" href=\"cookie/struct.Cookie.html\" title=\"struct cookie::Cookie\">Cookie</a>&lt;'static&gt;</h4></section></summary><div class=\"docblock\"><p>Converts <code>self</code> into a <code>Cookie</code> with a static lifetime with as few\nallocations as possible.</p>\n<h5 id=\"example-5\"><a href=\"#example-5\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span>c = Cookie::new(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>);\n<span class=\"kw\">let </span>owned_cookie = c.into_owned();\n<span class=\"macro\">assert_eq!</span>(owned_cookie.name_value(), (<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.name\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#349\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.name\" class=\"fn\">name</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\"><p>Returns the name of <code>self</code>.</p>\n<h5 id=\"example-6\"><a href=\"#example-6\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span>c = Cookie::new(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.name(), <span class=\"string\">&quot;name&quot;</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.value\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#364\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.value\" class=\"fn\">value</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\"><p>Returns the value of <code>self</code>.</p>\n<h5 id=\"example-7\"><a href=\"#example-7\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span>c = Cookie::new(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.value(), <span class=\"string\">&quot;value&quot;</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.name_value\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#379\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.name_value\" class=\"fn\">name_value</a>(&amp;self) -&gt; (&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>, &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>)</h4></section></summary><div class=\"docblock\"><p>Returns the name and value of <code>self</code> as a tuple of <code>(name, value)</code>.</p>\n<h5 id=\"example-8\"><a href=\"#example-8\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span>c = Cookie::new(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.name_value(), (<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.http_only\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#411\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.http_only\" class=\"fn\">http_only</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns whether this cookie was marked <code>HttpOnly</code> or not. Returns\n<code>Some(true)</code> when the cookie was explicitly set (manually or parsed) as\n<code>HttpOnly</code>, <code>Some(false)</code> when <code>http_only</code> was manually set to <code>false</code>,\nand <code>None</code> otherwise.</p>\n<h5 id=\"example-9\"><a href=\"#example-9\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span>c = Cookie::parse(<span class=\"string\">&quot;name=value; httponly&quot;</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(c.http_only(), <span class=\"prelude-val\">Some</span>(<span class=\"bool-val\">true</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = Cookie::new(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.http_only(), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = Cookie::new(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.http_only(), <span class=\"prelude-val\">None</span>);\n\n<span class=\"comment\">// An explicitly set &quot;false&quot; value.\n</span>c.set_http_only(<span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(c.http_only(), <span class=\"prelude-val\">Some</span>(<span class=\"bool-val\">false</span>));\n\n<span class=\"comment\">// An explicitly set &quot;true&quot; value.\n</span>c.set_http_only(<span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(c.http_only(), <span class=\"prelude-val\">Some</span>(<span class=\"bool-val\">true</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.secure\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#443\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.secure\" class=\"fn\">secure</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns whether this cookie was marked <code>Secure</code> or not. Returns\n<code>Some(true)</code> when the cookie was explicitly set (manually or parsed) as\n<code>Secure</code>, <code>Some(false)</code> when <code>secure</code> was manually set to <code>false</code>, and\n<code>None</code> otherwise.</p>\n<h5 id=\"example-10\"><a href=\"#example-10\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span>c = Cookie::parse(<span class=\"string\">&quot;name=value; Secure&quot;</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(c.secure(), <span class=\"prelude-val\">Some</span>(<span class=\"bool-val\">true</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = Cookie::parse(<span class=\"string\">&quot;name=value&quot;</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(c.secure(), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = Cookie::new(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.secure(), <span class=\"prelude-val\">None</span>);\n\n<span class=\"comment\">// An explicitly set &quot;false&quot; value.\n</span>c.set_secure(<span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(c.secure(), <span class=\"prelude-val\">Some</span>(<span class=\"bool-val\">false</span>));\n\n<span class=\"comment\">// An explicitly set &quot;true&quot; value.\n</span>c.set_secure(<span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(c.secure(), <span class=\"prelude-val\">Some</span>(<span class=\"bool-val\">true</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.same_site\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#458\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.same_site\" class=\"fn\">same_site</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"cookie/draft/enum.SameSite.html\" title=\"enum cookie::draft::SameSite\">SameSite</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the <code>SameSite</code> attribute of this cookie if one was specified.</p>\n<h5 id=\"example-11\"><a href=\"#example-11\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::{Cookie, SameSite};\n\n<span class=\"kw\">let </span>c = Cookie::parse(<span class=\"string\">&quot;name=value; SameSite=Lax&quot;</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(c.same_site(), <span class=\"prelude-val\">Some</span>(SameSite::Lax));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_age\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#476\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.max_age\" class=\"fn\">max_age</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"time/duration/struct.Duration.html\" title=\"struct time::duration::Duration\">Duration</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the specified max-age of the cookie if one was specified.</p>\n<h5 id=\"example-12\"><a href=\"#example-12\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span>c = Cookie::parse(<span class=\"string\">&quot;name=value&quot;</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(c.max_age(), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>c = Cookie::parse(<span class=\"string\">&quot;name=value; Max-Age=3600&quot;</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(c.max_age().map(|age| age.whole_hours()), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.path\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#497\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.path\" class=\"fn\">path</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the <code>Path</code> of the cookie if one was specified.</p>\n<h5 id=\"example-13\"><a href=\"#example-13\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span>c = Cookie::parse(<span class=\"string\">&quot;name=value&quot;</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(c.path(), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>c = Cookie::parse(<span class=\"string\">&quot;name=value; Path=/&quot;</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(c.path(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;/&quot;</span>));\n\n<span class=\"kw\">let </span>c = Cookie::parse(<span class=\"string\">&quot;name=value; path=/sub&quot;</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(c.path(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;/sub&quot;</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.domain\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#518\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.domain\" class=\"fn\">domain</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the <code>Domain</code> of the cookie if one was specified.</p>\n<h5 id=\"example-14\"><a href=\"#example-14\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span>c = Cookie::parse(<span class=\"string\">&quot;name=value&quot;</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(c.domain(), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>c = Cookie::parse(<span class=\"string\">&quot;name=value; Domain=crates.io&quot;</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(c.domain(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;crates.io&quot;</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.expires\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#545\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.expires\" class=\"fn\">expires</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"cookie/expiration/enum.Expiration.html\" title=\"enum cookie::expiration::Expiration\">Expiration</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the <a href=\"cookie/expiration/enum.Expiration.html\" title=\"enum cookie::expiration::Expiration\"><code>Expiration</code></a> of the cookie if one was specified.</p>\n<h5 id=\"example-15\"><a href=\"#example-15\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::{Cookie, Expiration};\n\n<span class=\"kw\">let </span>c = Cookie::parse(<span class=\"string\">&quot;name=value&quot;</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(c.expires(), <span class=\"prelude-val\">None</span>);\n\n<span class=\"comment\">// Here, `cookie.expires_datetime()` returns `None`.\n</span><span class=\"kw\">let </span>c = Cookie::build(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>).expires(<span class=\"prelude-val\">None</span>).finish();\n<span class=\"macro\">assert_eq!</span>(c.expires(), <span class=\"prelude-val\">Some</span>(Expiration::Session));\n\n<span class=\"kw\">let </span>expire_time = <span class=\"string\">&quot;Wed, 21 Oct 2017 07:28:00 GMT&quot;</span>;\n<span class=\"kw\">let </span>cookie_str = <span class=\"macro\">format!</span>(<span class=\"string\">&quot;name=value; Expires={}&quot;</span>, expire_time);\n<span class=\"kw\">let </span>c = Cookie::parse(cookie_str).unwrap();\n<span class=\"macro\">assert_eq!</span>(c.expires().and_then(|e| e.datetime()).map(|t| t.year()), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2017</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.expires_datetime\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#569\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.expires_datetime\" class=\"fn\">expires_datetime</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"time/offset_date_time/struct.OffsetDateTime.html\" title=\"struct time::offset_date_time::OffsetDateTime\">OffsetDateTime</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the expiration date-time of the cookie if one was specified.</p>\n<h5 id=\"example-16\"><a href=\"#example-16\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span>c = Cookie::parse(<span class=\"string\">&quot;name=value&quot;</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(c.expires_datetime(), <span class=\"prelude-val\">None</span>);\n\n<span class=\"comment\">// Here, `cookie.expires()` returns `Some`.\n</span><span class=\"kw\">let </span>c = Cookie::build(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>).expires(<span class=\"prelude-val\">None</span>).finish();\n<span class=\"macro\">assert_eq!</span>(c.expires_datetime(), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>expire_time = <span class=\"string\">&quot;Wed, 21 Oct 2017 07:28:00 GMT&quot;</span>;\n<span class=\"kw\">let </span>cookie_str = <span class=\"macro\">format!</span>(<span class=\"string\">&quot;name=value; Expires={}&quot;</span>, expire_time);\n<span class=\"kw\">let </span>c = Cookie::parse(cookie_str).unwrap();\n<span class=\"macro\">assert_eq!</span>(c.expires_datetime().map(|t| t.year()), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2017</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_name\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#586\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.set_name\" class=\"fn\">set_name</a>&lt;N&gt;(&amp;mut self, name: N)<span class=\"where fmt-newline\">where\n    N: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'c, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Sets the name of <code>self</code> to <code>name</code>.</p>\n<h5 id=\"example-17\"><a href=\"#example-17\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = Cookie::new(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.name(), <span class=\"string\">&quot;name&quot;</span>);\n\nc.set_name(<span class=\"string\">&quot;foo&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.name(), <span class=\"string\">&quot;foo&quot;</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_value\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#603\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.set_value\" class=\"fn\">set_value</a>&lt;V&gt;(&amp;mut self, value: V)<span class=\"where fmt-newline\">where\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'c, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Sets the value of <code>self</code> to <code>value</code>.</p>\n<h5 id=\"example-18\"><a href=\"#example-18\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = Cookie::new(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.value(), <span class=\"string\">&quot;value&quot;</span>);\n\nc.set_value(<span class=\"string\">&quot;bar&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.value(), <span class=\"string\">&quot;bar&quot;</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_http_only\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#628\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.set_http_only\" class=\"fn\">set_http_only</a>&lt;T&gt;(&amp;mut self, value: T)<span class=\"where fmt-newline\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>&gt;&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Sets the value of <code>http_only</code> in <code>self</code> to <code>value</code>.  If <code>value</code> is\n<code>None</code>, the field is unset.</p>\n<h5 id=\"example-19\"><a href=\"#example-19\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = Cookie::new(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.http_only(), <span class=\"prelude-val\">None</span>);\n\nc.set_http_only(<span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(c.http_only(), <span class=\"prelude-val\">Some</span>(<span class=\"bool-val\">true</span>));\n\nc.set_http_only(<span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(c.http_only(), <span class=\"prelude-val\">Some</span>(<span class=\"bool-val\">false</span>));\n\nc.set_http_only(<span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(c.http_only(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_secure\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#653\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.set_secure\" class=\"fn\">set_secure</a>&lt;T&gt;(&amp;mut self, value: T)<span class=\"where fmt-newline\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>&gt;&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Sets the value of <code>secure</code> in <code>self</code> to <code>value</code>. If <code>value</code> is <code>None</code>,\nthe field is unset.</p>\n<h5 id=\"example-20\"><a href=\"#example-20\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = Cookie::new(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.secure(), <span class=\"prelude-val\">None</span>);\n\nc.set_secure(<span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(c.secure(), <span class=\"prelude-val\">Some</span>(<span class=\"bool-val\">true</span>));\n\nc.set_secure(<span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(c.secure(), <span class=\"prelude-val\">Some</span>(<span class=\"bool-val\">false</span>));\n\nc.set_secure(<span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(c.secure(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_same_site\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#692\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.set_same_site\" class=\"fn\">set_same_site</a>&lt;T&gt;(&amp;mut self, value: T)<span class=\"where fmt-newline\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"cookie/draft/enum.SameSite.html\" title=\"enum cookie::draft::SameSite\">SameSite</a>&gt;&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Sets the value of <code>same_site</code> in <code>self</code> to <code>value</code>. If <code>value</code> is\n<code>None</code>, the field is unset. If <code>value</code> is <code>SameSite::None</code>, the โSecureโ\nflag will be set when the cookie is written out unless <code>secure</code> is\nexplicitly set to <code>false</code> via <a href=\"cookie/struct.Cookie.html#method.set_secure\" title=\"method cookie::Cookie::set_secure\"><code>Cookie::set_secure()</code></a> or the equivalent\nbuilder method.</p>\n<h5 id=\"example-21\"><a href=\"#example-21\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::{Cookie, SameSite};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = Cookie::new(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.same_site(), <span class=\"prelude-val\">None</span>);\n\nc.set_same_site(SameSite::None);\n<span class=\"macro\">assert_eq!</span>(c.same_site(), <span class=\"prelude-val\">Some</span>(SameSite::None));\n<span class=\"macro\">assert_eq!</span>(c.to_string(), <span class=\"string\">&quot;name=value; SameSite=None; Secure&quot;</span>);\n\nc.set_secure(<span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(c.to_string(), <span class=\"string\">&quot;name=value; SameSite=None&quot;</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = Cookie::new(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.same_site(), <span class=\"prelude-val\">None</span>);\n\nc.set_same_site(SameSite::Strict);\n<span class=\"macro\">assert_eq!</span>(c.same_site(), <span class=\"prelude-val\">Some</span>(SameSite::Strict));\n<span class=\"macro\">assert_eq!</span>(c.to_string(), <span class=\"string\">&quot;name=value; SameSite=Strict&quot;</span>);\n\nc.set_same_site(<span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(c.same_site(), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(c.to_string(), <span class=\"string\">&quot;name=value&quot;</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_max_age\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#718\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.set_max_age\" class=\"fn\">set_max_age</a>&lt;D&gt;(&amp;mut self, value: D)<span class=\"where fmt-newline\">where\n    D: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"time/duration/struct.Duration.html\" title=\"struct time::duration::Duration\">Duration</a>&gt;&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Sets the value of <code>max_age</code> in <code>self</code> to <code>value</code>. If <code>value</code> is <code>None</code>,\nthe field is unset.</p>\n<h5 id=\"example-22\"><a href=\"#example-22\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n<span class=\"kw\">use </span>cookie::time::Duration;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = Cookie::new(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.max_age(), <span class=\"prelude-val\">None</span>);\n\nc.set_max_age(Duration::hours(<span class=\"number\">10</span>));\n<span class=\"macro\">assert_eq!</span>(c.max_age(), <span class=\"prelude-val\">Some</span>(Duration::hours(<span class=\"number\">10</span>)));\n\nc.set_max_age(<span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert!</span>(c.max_age().is_none());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_path\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#735\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.set_path\" class=\"fn\">set_path</a>&lt;P&gt;(&amp;mut self, path: P)<span class=\"where fmt-newline\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'c, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Sets the <code>path</code> of <code>self</code> to <code>path</code>.</p>\n<h5 id=\"example-23\"><a href=\"#example-23\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = Cookie::new(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.path(), <span class=\"prelude-val\">None</span>);\n\nc.set_path(<span class=\"string\">&quot;/&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.path(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;/&quot;</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unset_path\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#755\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.unset_path\" class=\"fn\">unset_path</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Unsets the <code>path</code> of <code>self</code>.</p>\n<h5 id=\"example-24\"><a href=\"#example-24\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = Cookie::new(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.path(), <span class=\"prelude-val\">None</span>);\n\nc.set_path(<span class=\"string\">&quot;/&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.path(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;/&quot;</span>));\n\nc.unset_path();\n<span class=\"macro\">assert_eq!</span>(c.path(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_domain\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#772\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.set_domain\" class=\"fn\">set_domain</a>&lt;D&gt;(&amp;mut self, domain: D)<span class=\"where fmt-newline\">where\n    D: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'c, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Sets the <code>domain</code> of <code>self</code> to <code>domain</code>.</p>\n<h5 id=\"example-25\"><a href=\"#example-25\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = Cookie::new(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.domain(), <span class=\"prelude-val\">None</span>);\n\nc.set_domain(<span class=\"string\">&quot;rust-lang.org&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.domain(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;rust-lang.org&quot;</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unset_domain\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#792\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.unset_domain\" class=\"fn\">unset_domain</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Unsets the <code>domain</code> of <code>self</code>.</p>\n<h5 id=\"example-26\"><a href=\"#example-26\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = Cookie::new(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.domain(), <span class=\"prelude-val\">None</span>);\n\nc.set_domain(<span class=\"string\">&quot;rust-lang.org&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.domain(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;rust-lang.org&quot;</span>));\n\nc.unset_domain();\n<span class=\"macro\">assert_eq!</span>(c.domain(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_expires\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#818\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.set_expires\" class=\"fn\">set_expires</a>&lt;T&gt;(&amp;mut self, time: T)<span class=\"where fmt-newline\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"cookie/expiration/enum.Expiration.html\" title=\"enum cookie::expiration::Expiration\">Expiration</a>&gt;,</span></h4></section></summary><div class=\"docblock\"><p>Sets the expires field of <code>self</code> to <code>time</code>. If <code>time</code> is <code>None</code>, an\nexpiration of <a href=\"cookie/expiration/enum.Expiration.html#variant.Session\" title=\"variant cookie::expiration::Expiration::Session\"><code>Session</code></a> is set.</p>\n<h5 id=\"example-27\"><a href=\"#example-27\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::{Cookie, Expiration};\n<span class=\"kw\">use </span>cookie::time::{Duration, OffsetDateTime};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = Cookie::new(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.expires(), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>now = OffsetDateTime::now_utc();\nnow += Duration::weeks(<span class=\"number\">52</span>);\n\nc.set_expires(now);\n<span class=\"macro\">assert!</span>(c.expires().is_some());\n\nc.set_expires(<span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(c.expires(), <span class=\"prelude-val\">Some</span>(Expiration::Session));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unset_expires\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#842\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.unset_expires\" class=\"fn\">unset_expires</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Unsets the <code>expires</code> of <code>self</code>.</p>\n<h5 id=\"example-28\"><a href=\"#example-28\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::{Cookie, Expiration};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = Cookie::new(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;value&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.expires(), <span class=\"prelude-val\">None</span>);\n\nc.set_expires(<span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(c.expires(), <span class=\"prelude-val\">Some</span>(Expiration::Session));\n\nc.unset_expires();\n<span class=\"macro\">assert_eq!</span>(c.expires(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.make_permanent\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#866\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.make_permanent\" class=\"fn\">make_permanent</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Makes <code>self</code> a โpermanentโ cookie by extending its expiration and max\nage 20 years into the future.</p>\n<h5 id=\"example-29\"><a href=\"#example-29\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n<span class=\"kw\">use </span>cookie::time::Duration;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = Cookie::new(<span class=\"string\">&quot;foo&quot;</span>, <span class=\"string\">&quot;bar&quot;</span>);\n<span class=\"macro\">assert!</span>(c.expires().is_none());\n<span class=\"macro\">assert!</span>(c.max_age().is_none());\n\nc.make_permanent();\n<span class=\"macro\">assert!</span>(c.expires().is_some());\n<span class=\"macro\">assert_eq!</span>(c.max_age(), <span class=\"prelude-val\">Some</span>(Duration::days(<span class=\"number\">365 </span>* <span class=\"number\">20</span>)));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.make_removal\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#893\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.make_removal\" class=\"fn\">make_removal</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Make <code>self</code> a โremovalโ cookie by clearing its value, setting a max-age\nof <code>0</code>, and setting an expiration date far in the past.</p>\n<h5 id=\"example-30\"><a href=\"#example-30\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n<span class=\"kw\">use </span>cookie::time::Duration;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = Cookie::new(<span class=\"string\">&quot;foo&quot;</span>, <span class=\"string\">&quot;bar&quot;</span>);\nc.make_permanent();\n<span class=\"macro\">assert_eq!</span>(c.max_age(), <span class=\"prelude-val\">Some</span>(Duration::days(<span class=\"number\">365 </span>* <span class=\"number\">20</span>)));\n<span class=\"macro\">assert_eq!</span>(c.value(), <span class=\"string\">&quot;bar&quot;</span>);\n\nc.make_removal();\n<span class=\"macro\">assert_eq!</span>(c.value(), <span class=\"string\">&quot;&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(c.max_age(), <span class=\"prelude-val\">Some</span>(Duration::ZERO));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.name_raw\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#961\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.name_raw\" class=\"fn\">name_raw</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'c <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the name of <code>self</code> as a string slice of the raw string <code>self</code>\nwas originally parsed from. If <code>self</code> was not originally parsed from a\nraw string, returns <code>None</code>.</p>\n<p>This method differs from <a href=\"cookie/struct.Cookie.html#method.name\" title=\"method cookie::Cookie::name\"><code>Cookie::name()</code></a> in that it returns a string\nwith the same lifetime as the originally parsed string. This lifetime\nmay outlive <code>self</code>. If a longer lifetime is not required, or youโre\nunsure if you need a longer lifetime, use <a href=\"cookie/struct.Cookie.html#method.name\" title=\"method cookie::Cookie::name\"><code>Cookie::name()</code></a>.</p>\n<h5 id=\"example-31\"><a href=\"#example-31\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span>cookie_string = <span class=\"macro\">format!</span>(<span class=\"string\">&quot;{}={}&quot;</span>, <span class=\"string\">&quot;foo&quot;</span>, <span class=\"string\">&quot;bar&quot;</span>);\n\n<span class=\"comment\">// `c` will be dropped at the end of the scope, but `name` will live on\n</span><span class=\"kw\">let </span>name = {\n    <span class=\"kw\">let </span>c = Cookie::parse(cookie_string.as_str()).unwrap();\n    c.name_raw()\n};\n\n<span class=\"macro\">assert_eq!</span>(name, <span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;foo&quot;</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.value_raw\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#991\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.value_raw\" class=\"fn\">value_raw</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'c <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the value of <code>self</code> as a string slice of the raw string <code>self</code>\nwas originally parsed from. If <code>self</code> was not originally parsed from a\nraw string, returns <code>None</code>.</p>\n<p>This method differs from <a href=\"cookie/struct.Cookie.html#method.value\" title=\"method cookie::Cookie::value\"><code>Cookie::value()</code></a> in that it returns a\nstring with the same lifetime as the originally parsed string. This\nlifetime may outlive <code>self</code>. If a longer lifetime is not required, or\nyouโre unsure if you need a longer lifetime, use <a href=\"cookie/struct.Cookie.html#method.value\" title=\"method cookie::Cookie::value\"><code>Cookie::value()</code></a>.</p>\n<h5 id=\"example-32\"><a href=\"#example-32\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span>cookie_string = <span class=\"macro\">format!</span>(<span class=\"string\">&quot;{}={}&quot;</span>, <span class=\"string\">&quot;foo&quot;</span>, <span class=\"string\">&quot;bar&quot;</span>);\n\n<span class=\"comment\">// `c` will be dropped at the end of the scope, but `value` will live on\n</span><span class=\"kw\">let </span>value = {\n    <span class=\"kw\">let </span>c = Cookie::parse(cookie_string.as_str()).unwrap();\n    c.value_raw()\n};\n\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;bar&quot;</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.path_raw\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#1022\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.path_raw\" class=\"fn\">path_raw</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'c <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the <code>Path</code> of <code>self</code> as a string slice of the raw string <code>self</code>\nwas originally parsed from. If <code>self</code> was not originally parsed from a\nraw string, or if <code>self</code> doesnโt contain a <code>Path</code>, or if the <code>Path</code> has\nchanged since parsing, returns <code>None</code>.</p>\n<p>This method differs from <a href=\"cookie/struct.Cookie.html#method.path\" title=\"method cookie::Cookie::path\"><code>Cookie::path()</code></a> in that it returns a\nstring with the same lifetime as the originally parsed string. This\nlifetime may outlive <code>self</code>. If a longer lifetime is not required, or\nyouโre unsure if you need a longer lifetime, use <a href=\"cookie/struct.Cookie.html#method.path\" title=\"method cookie::Cookie::path\"><code>Cookie::path()</code></a>.</p>\n<h5 id=\"example-33\"><a href=\"#example-33\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span>cookie_string = <span class=\"macro\">format!</span>(<span class=\"string\">&quot;{}={}; Path=/&quot;</span>, <span class=\"string\">&quot;foo&quot;</span>, <span class=\"string\">&quot;bar&quot;</span>);\n\n<span class=\"comment\">// `c` will be dropped at the end of the scope, but `path` will live on\n</span><span class=\"kw\">let </span>path = {\n    <span class=\"kw\">let </span>c = Cookie::parse(cookie_string.as_str()).unwrap();\n    c.path_raw()\n};\n\n<span class=\"macro\">assert_eq!</span>(path, <span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;/&quot;</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.domain_raw\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#1056\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.domain_raw\" class=\"fn\">domain_raw</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'c <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the <code>Domain</code> of <code>self</code> as a string slice of the raw string\n<code>self</code> was originally parsed from. If <code>self</code> was not originally parsed\nfrom a raw string, or if <code>self</code> doesnโt contain a <code>Domain</code>, or if the\n<code>Domain</code> has changed since parsing, returns <code>None</code>.</p>\n<p>This method differs from <a href=\"cookie/struct.Cookie.html#method.domain\" title=\"method cookie::Cookie::domain\"><code>Cookie::domain()</code></a> in that it returns a\nstring with the same lifetime as the originally parsed string. This\nlifetime may outlive <code>self</code> struct. If a longer lifetime is not\nrequired, or youโre unsure if you need a longer lifetime, use\n<a href=\"cookie/struct.Cookie.html#method.domain\" title=\"method cookie::Cookie::domain\"><code>Cookie::domain()</code></a>.</p>\n<h5 id=\"example-34\"><a href=\"#example-34\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span>cookie_string = <span class=\"macro\">format!</span>(<span class=\"string\">&quot;{}={}; Domain=crates.io&quot;</span>, <span class=\"string\">&quot;foo&quot;</span>, <span class=\"string\">&quot;bar&quot;</span>);\n\n<span class=\"comment\">//`c` will be dropped at the end of the scope, but `domain` will live on\n</span><span class=\"kw\">let </span>domain = {\n    <span class=\"kw\">let </span>c = Cookie::parse(cookie_string.as_str()).unwrap();\n    c.domain_raw()\n};\n\n<span class=\"macro\">assert_eq!</span>(domain, <span class=\"prelude-val\">Some</span>(<span class=\"string\">&quot;crates.io&quot;</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encoded\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#1082\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.encoded\" class=\"fn\">encoded</a>&lt;'a&gt;(&amp;'a self) -&gt; <a class=\"struct\" href=\"cookie/struct.Display.html\" title=\"struct cookie::Display\">Display</a>&lt;'a, 'c&gt;</h4></section></summary><div class=\"docblock\"><p>Wraps <code>self</code> in an encoded <a href=\"cookie/struct.Display.html\" title=\"struct cookie::Display\"><code>Display</code></a>: a cost-free wrapper around\n<code>Cookie</code> whose <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\"><code>fmt::Display</code></a> implementation percent-encodes the name\nand value of the wrapped <code>Cookie</code>.</p>\n<p>The returned structure can be chained with <a href=\"cookie/struct.Display.html#method.stripped\" title=\"method cookie::Display::stripped\"><code>Display::stripped()</code></a> to\ndisplay only the name and value.</p>\n<h5 id=\"example-35\"><a href=\"#example-35\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = Cookie::build(<span class=\"string\">&quot;my name&quot;</span>, <span class=\"string\">&quot;this; value?&quot;</span>).secure(<span class=\"bool-val\">true</span>).finish();\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>c.encoded().to_string(), <span class=\"string\">&quot;my%20name=this%3B%20value%3F; Secure&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>c.encoded().stripped().to_string(), <span class=\"string\">&quot;my%20name=this%3B%20value%3F&quot;</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.stripped\" class=\"method\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#1106\">source</a><h4 class=\"code-header\">pub fn <a href=\"cookie/struct.Cookie.html#tymethod.stripped\" class=\"fn\">stripped</a>&lt;'a&gt;(&amp;'a self) -&gt; <a class=\"struct\" href=\"cookie/struct.Display.html\" title=\"struct cookie::Display\">Display</a>&lt;'a, 'c&gt;</h4></section></summary><div class=\"docblock\"><p>Wraps <code>self</code> in a stripped <code>Display</code>]: a cost-free wrapper around\n<code>Cookie</code> whose <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\"><code>fmt::Display</code></a> implementation prints only the <code>name</code>\nand <code>value</code> of the wrapped <code>Cookie</code>.</p>\n<p>The returned structure can be chained with <a href=\"cookie/struct.Display.html#method.encoded\" title=\"method cookie::Display::encoded\"><code>Display::encoded()</code></a> to\nencode the name and value.</p>\n<h5 id=\"example-36\"><a href=\"#example-36\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = Cookie::build(<span class=\"string\">&quot;key?&quot;</span>, <span class=\"string\">&quot;value&quot;</span>).secure(<span class=\"bool-val\">true</span>).path(<span class=\"string\">&quot;/&quot;</span>).finish();\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>c.stripped().to_string(), <span class=\"string\">&quot;key?=value&quot;</span>);\n<span class=\"comment\">// Note: `encoded()` is only available when `percent-encode` is enabled.\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>c.stripped().encoded().to_string(), <span class=\"string\">&quot;key%3F=value&quot;</span>);</code></pre></div>\n</div></details></div></details>",0,"thirtyfour::Cookie"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CWebDriverCookie%3E-for-Cookie%3C'static%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/fantoccini/cookies.rs.html#58\">source</a><a href=\"#impl-TryFrom%3CWebDriverCookie%3E-for-Cookie%3C'static%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;WebDriverCookie&gt; for <a class=\"struct\" href=\"cookie/struct.Cookie.html\" title=\"struct cookie::Cookie\">Cookie</a>&lt;'static&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"fantoccini/error/enum.CmdError.html\" title=\"enum fantoccini::error::CmdError\">CmdError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/fantoccini/cookies.rs.html#61\">source</a><a href=\"#method.try_from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    webdriver_cookie: WebDriverCookie\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"cookie/struct.Cookie.html\" title=\"struct cookie::Cookie\">Cookie</a>&lt;'static&gt;, &lt;<a class=\"struct\" href=\"cookie/struct.Cookie.html\" title=\"struct cookie::Cookie\">Cookie</a>&lt;'static&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;WebDriverCookie&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<WebDriverCookie>","thirtyfour::Cookie"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Cookie%3C'c%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#183\">source</a><a href=\"#impl-Debug-for-Cookie%3C'c%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'c&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"cookie/struct.Cookie.html\" title=\"struct cookie::Cookie\">Cookie</a>&lt;'c&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#183\">source</a><a href=\"#method.fmt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","thirtyfour::Cookie"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Cookie%3C'c%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#183\">source</a><a href=\"#impl-Clone-for-Cookie%3C'c%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'c&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"cookie/struct.Cookie.html\" title=\"struct cookie::Cookie\">Cookie</a>&lt;'c&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#183\">source</a><a href=\"#method.clone\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"cookie/struct.Cookie.html\" title=\"struct cookie::Cookie\">Cookie</a>&lt;'c&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","thirtyfour::Cookie"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-Cookie%3C'c%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#1213\">source</a><a href=\"#impl-Display-for-Cookie%3C'c%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'c&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"struct\" href=\"cookie/struct.Cookie.html\" title=\"struct cookie::Cookie\">Cookie</a>&lt;'c&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#1230\">source</a><a href=\"#method.fmt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Formats the cookie <code>self</code> as a <code>Set-Cookie</code> header value.</p>\n<p>Does <em>not</em> percent-encode any values. To percent-encode, use\n<a href=\"cookie/struct.Cookie.html#method.encoded\" title=\"method cookie::Cookie::encoded\"><code>Cookie::encoded()</code></a>.</p>\n<h5 id=\"example\"><a href=\"#example\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cookie::Cookie;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>cookie = Cookie::build(<span class=\"string\">&quot;foo&quot;</span>, <span class=\"string\">&quot;bar&quot;</span>)\n    .path(<span class=\"string\">&quot;/&quot;</span>)\n    .finish();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>cookie.to_string(), <span class=\"string\">&quot;foo=bar; Path=/&quot;</span>);</code></pre></div>\n</div></details></div></details>","Display","thirtyfour::Cookie"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-Cookie%3C'static%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#1236\">source</a><a href=\"#impl-FromStr-for-Cookie%3C'static%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/str/traits/trait.FromStr.html\" title=\"trait core::str::traits::FromStr\">FromStr</a> for <a class=\"struct\" href=\"cookie/struct.Cookie.html\" title=\"struct cookie::Cookie\">Cookie</a>&lt;'static&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/str/traits/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"enum\" href=\"cookie/parse/enum.ParseError.html\" title=\"enum cookie::parse::ParseError\">ParseError</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#1239\">source</a><a href=\"#method.from_str\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/str/traits/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"cookie/struct.Cookie.html\" title=\"struct cookie::Cookie\">Cookie</a>&lt;'static&gt;, <a class=\"enum\" href=\"cookie/parse/enum.ParseError.html\" title=\"enum cookie::parse::ParseError\">ParseError</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"https://doc.rust-lang.org/1.75.0/core/str/traits/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","thirtyfour::Cookie"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CCookie%3C'b%3E%3E-for-Cookie%3C'a%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#1244\">source</a><a href=\"#impl-PartialEq%3CCookie%3C'b%3E%3E-for-Cookie%3C'a%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"cookie/struct.Cookie.html\" title=\"struct cookie::Cookie\">Cookie</a>&lt;'b&gt;&gt; for <a class=\"struct\" href=\"cookie/struct.Cookie.html\" title=\"struct cookie::Cookie\">Cookie</a>&lt;'a&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/cookie/lib.rs.html#1245\">source</a><a href=\"#method.eq\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"cookie/struct.Cookie.html\" title=\"struct cookie::Cookie\">Cookie</a>&lt;'b&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<Cookie<'b>>","thirtyfour::Cookie"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()