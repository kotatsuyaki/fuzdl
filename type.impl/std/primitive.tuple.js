(function() {
    var type_impls = Object.fromEntries([["exr",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CVec2%3CT%3E%3E-for-(T,+T)\" class=\"impl\"><a class=\"src rightside\" href=\"src/exr/math.rs.html#138-140\">Source</a><a href=\"#impl-From%3CVec2%3CT%3E%3E-for-(T,+T)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"exr/math/struct.Vec2.html\" title=\"struct exr::math::Vec2\">Vec2</a>&lt;T&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.tuple.html\">(T, T)</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/exr/math.rs.html#139\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(vec2: <a class=\"struct\" href=\"exr/math/struct.Vec2.html\" title=\"struct exr::math::Vec2\">Vec2</a>&lt;T&gt;) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Vec2<T>>","exr::meta::attribute::Rational"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoRecursive-for-(A,+B)\" class=\"impl\"><a class=\"src rightside\" href=\"src/exr/image/recursive.rs.html#148\">Source</a><a href=\"#impl-IntoRecursive-for-(A,+B)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B&gt; <a class=\"trait\" href=\"exr/image/recursive/trait.IntoRecursive.html\" title=\"trait exr::image::recursive::IntoRecursive\">IntoRecursive</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.tuple.html\">(A, B)</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Recursive\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/exr/image/recursive.rs.html#148\">Source</a><a href=\"#associatedtype.Recursive\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"exr/image/recursive/trait.IntoRecursive.html#associatedtype.Recursive\" class=\"associatedtype\">Recursive</a> = <a class=\"struct\" href=\"exr/image/recursive/struct.Recursive.html\" title=\"struct exr::image::recursive::Recursive\">Recursive</a>&lt;<a class=\"struct\" href=\"exr/image/recursive/struct.Recursive.html\" title=\"struct exr::image::recursive::Recursive\">Recursive</a>&lt;<a class=\"struct\" href=\"exr/image/recursive/struct.NoneMore.html\" title=\"struct exr::image::recursive::NoneMore\">NoneMore</a>, A&gt;, B&gt;</h4></section></summary><div class='docblock'>The recursive type resulting from this tuple.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_recursive\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/exr/image/recursive.rs.html#148\">Source</a><a href=\"#method.into_recursive\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"exr/image/recursive/trait.IntoRecursive.html#tymethod.into_recursive\" class=\"fn\">into_recursive</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"exr/image/recursive/trait.IntoRecursive.html#associatedtype.Recursive\" title=\"type exr::image::recursive::IntoRecursive::Recursive\">Recursive</a></h4></section></summary><div class='docblock'>Create a recursive type from this tuple.</div></details></div></details>","IntoRecursive","exr::meta::attribute::Rational"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoRecursive-for-(A,+B,+C)\" class=\"impl\"><a class=\"src rightside\" href=\"src/exr/image/recursive.rs.html#149\">Source</a><a href=\"#impl-IntoRecursive-for-(A,+B,+C)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B, C&gt; <a class=\"trait\" href=\"exr/image/recursive/trait.IntoRecursive.html\" title=\"trait exr::image::recursive::IntoRecursive\">IntoRecursive</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.tuple.html\">(A, B, C)</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Recursive\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/exr/image/recursive.rs.html#149\">Source</a><a href=\"#associatedtype.Recursive\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"exr/image/recursive/trait.IntoRecursive.html#associatedtype.Recursive\" class=\"associatedtype\">Recursive</a> = <a class=\"struct\" href=\"exr/image/recursive/struct.Recursive.html\" title=\"struct exr::image::recursive::Recursive\">Recursive</a>&lt;<a class=\"struct\" href=\"exr/image/recursive/struct.Recursive.html\" title=\"struct exr::image::recursive::Recursive\">Recursive</a>&lt;<a class=\"struct\" href=\"exr/image/recursive/struct.Recursive.html\" title=\"struct exr::image::recursive::Recursive\">Recursive</a>&lt;<a class=\"struct\" href=\"exr/image/recursive/struct.NoneMore.html\" title=\"struct exr::image::recursive::NoneMore\">NoneMore</a>, A&gt;, B&gt;, C&gt;</h4></section></summary><div class='docblock'>The recursive type resulting from this tuple.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_recursive\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/exr/image/recursive.rs.html#149\">Source</a><a href=\"#method.into_recursive\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"exr/image/recursive/trait.IntoRecursive.html#tymethod.into_recursive\" class=\"fn\">into_recursive</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"exr/image/recursive/trait.IntoRecursive.html#associatedtype.Recursive\" title=\"type exr::image::recursive::IntoRecursive::Recursive\">Recursive</a></h4></section></summary><div class='docblock'>Create a recursive type from this tuple.</div></details></div></details>","IntoRecursive","exr::image::RgbChannels"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoRecursive-for-(A,+B,+C,+D)\" class=\"impl\"><a class=\"src rightside\" href=\"src/exr/image/recursive.rs.html#150\">Source</a><a href=\"#impl-IntoRecursive-for-(A,+B,+C,+D)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B, C, D&gt; <a class=\"trait\" href=\"exr/image/recursive/trait.IntoRecursive.html\" title=\"trait exr::image::recursive::IntoRecursive\">IntoRecursive</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.tuple.html\">(A, B, C, D)</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Recursive\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/exr/image/recursive.rs.html#150\">Source</a><a href=\"#associatedtype.Recursive\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"exr/image/recursive/trait.IntoRecursive.html#associatedtype.Recursive\" class=\"associatedtype\">Recursive</a> = <a class=\"struct\" href=\"exr/image/recursive/struct.Recursive.html\" title=\"struct exr::image::recursive::Recursive\">Recursive</a>&lt;<a class=\"struct\" href=\"exr/image/recursive/struct.Recursive.html\" title=\"struct exr::image::recursive::Recursive\">Recursive</a>&lt;<a class=\"struct\" href=\"exr/image/recursive/struct.Recursive.html\" title=\"struct exr::image::recursive::Recursive\">Recursive</a>&lt;<a class=\"struct\" href=\"exr/image/recursive/struct.Recursive.html\" title=\"struct exr::image::recursive::Recursive\">Recursive</a>&lt;<a class=\"struct\" href=\"exr/image/recursive/struct.NoneMore.html\" title=\"struct exr::image::recursive::NoneMore\">NoneMore</a>, A&gt;, B&gt;, C&gt;, D&gt;</h4></section></summary><div class='docblock'>The recursive type resulting from this tuple.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_recursive\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/exr/image/recursive.rs.html#150\">Source</a><a href=\"#method.into_recursive\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"exr/image/recursive/trait.IntoRecursive.html#tymethod.into_recursive\" class=\"fn\">into_recursive</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"exr/image/recursive/trait.IntoRecursive.html#associatedtype.Recursive\" title=\"type exr::image::recursive::IntoRecursive::Recursive\">Recursive</a></h4></section></summary><div class='docblock'>Create a recursive type from this tuple.</div></details></div></details>","IntoRecursive","exr::image::RgbaChannels"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ValidateResult-for-(A,+B,+C)\" class=\"impl\"><a class=\"src rightside\" href=\"src/exr/image/mod.rs.html#1056-1060\">Source</a><a href=\"#impl-ValidateResult-for-(A,+B,+C)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B, C&gt; <a class=\"trait\" href=\"exr/image/validate_results/trait.ValidateResult.html\" title=\"trait exr::image::validate_results::ValidateResult\">ValidateResult</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.tuple.html\">(A, B, C)</a><div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"exr/image/validate_results/trait.ValidateResult.html\" title=\"trait exr::image::validate_results::ValidateResult\">ValidateResult</a>,\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"exr/image/validate_results/trait.ValidateResult.html\" title=\"trait exr::image::validate_results::ValidateResult\">ValidateResult</a>,\n    C: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"exr/image/validate_results/trait.ValidateResult.html\" title=\"trait exr::image::validate_results::ValidateResult\">ValidateResult</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.validate_result\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/exr/image/mod.rs.html#1057-1059\">Source</a><a href=\"#method.validate_result\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"exr/image/validate_results/trait.ValidateResult.html#tymethod.validate_result\" class=\"fn\">validate_result</a>(\n    &amp;self,\n    other: &amp;Self,\n    options: <a class=\"struct\" href=\"exr/image/validate_results/struct.ValidationOptions.html\" title=\"struct exr::image::validate_results::ValidationOptions\">ValidationOptions</a>,\n    location: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>,\n) -&gt; <a class=\"type\" href=\"exr/image/validate_results/type.ValidationResult.html\" title=\"type exr::image::validate_results::ValidationResult\">ValidationResult</a></h4></section></summary><div class='docblock'>Compare self with the other.\nExceptional behaviour: <a href=\"exr/image/validate_results/trait.ValidateResult.html#tymethod.validate_result\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.assert_equals_result\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/exr/image/mod.rs.html#888-890\">Source</a><a href=\"#method.assert_equals_result\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"exr/image/validate_results/trait.ValidateResult.html#method.assert_equals_result\" class=\"fn\">assert_equals_result</a>(&amp;self, result: &amp;Self)</h4></section></summary><div class='docblock'>Compare self with the other. Panics if not equal. <a href=\"exr/image/validate_results/trait.ValidateResult.html#method.assert_equals_result\">Read more</a></div></details></div></details>","ValidateResult","exr::image::RgbChannels"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ValidateResult-for-(A,+B,+C,+D)\" class=\"impl\"><a class=\"src rightside\" href=\"src/exr/image/mod.rs.html#1050-1054\">Source</a><a href=\"#impl-ValidateResult-for-(A,+B,+C,+D)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B, C, D&gt; <a class=\"trait\" href=\"exr/image/validate_results/trait.ValidateResult.html\" title=\"trait exr::image::validate_results::ValidateResult\">ValidateResult</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.tuple.html\">(A, B, C, D)</a><div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"exr/image/validate_results/trait.ValidateResult.html\" title=\"trait exr::image::validate_results::ValidateResult\">ValidateResult</a>,\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"exr/image/validate_results/trait.ValidateResult.html\" title=\"trait exr::image::validate_results::ValidateResult\">ValidateResult</a>,\n    C: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"exr/image/validate_results/trait.ValidateResult.html\" title=\"trait exr::image::validate_results::ValidateResult\">ValidateResult</a>,\n    D: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"exr/image/validate_results/trait.ValidateResult.html\" title=\"trait exr::image::validate_results::ValidateResult\">ValidateResult</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.validate_result\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/exr/image/mod.rs.html#1051-1053\">Source</a><a href=\"#method.validate_result\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"exr/image/validate_results/trait.ValidateResult.html#tymethod.validate_result\" class=\"fn\">validate_result</a>(\n    &amp;self,\n    other: &amp;Self,\n    options: <a class=\"struct\" href=\"exr/image/validate_results/struct.ValidationOptions.html\" title=\"struct exr::image::validate_results::ValidationOptions\">ValidationOptions</a>,\n    location: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>,\n) -&gt; <a class=\"type\" href=\"exr/image/validate_results/type.ValidationResult.html\" title=\"type exr::image::validate_results::ValidationResult\">ValidationResult</a></h4></section></summary><div class='docblock'>Compare self with the other.\nExceptional behaviour: <a href=\"exr/image/validate_results/trait.ValidateResult.html#tymethod.validate_result\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.assert_equals_result\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/exr/image/mod.rs.html#888-890\">Source</a><a href=\"#method.assert_equals_result\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"exr/image/validate_results/trait.ValidateResult.html#method.assert_equals_result\" class=\"fn\">assert_equals_result</a>(&amp;self, result: &amp;Self)</h4></section></summary><div class='docblock'>Compare self with the other. Panics if not equal. <a href=\"exr/image/validate_results/trait.ValidateResult.html#method.assert_equals_result\">Read more</a></div></details></div></details>","ValidateResult","exr::image::RgbaChannels"]]],["lopdf",[]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[16217,13]}