searchState.loadedDescShard("lopdf", 0, "Dictionary object.\nPDF document.\nContains the error value\nBasic PDF object types defined in an enum.\nObject identifier consists of two parts: object number and …\nContains the success value\nStream object Warning - all streams must be indirect …\nString objects can be written in two formats.\nAdd PDF object into document’s object list.\nAdjusts the Parents that have a ObjectId of (0,_) to that …\nCan the stream be compressed by the <code>Document::compress()</code> …\nWARNING: <code>tm_wday</code> (weekday), <code>tm_yday</code> (day index in year), …\nGet the object value as a float. Unlike as_f64() this will …\nused to locate a stored Bookmark so children can be …\nThe bookmarks in the document. Render at the very end of …\nGet catalog dictionary.\nChange producer of document information dictionary.\nChildren, Must be a Collection that allows for insertion …\nR,G,B\nCompress PDF stream objects.\nContents of the stream in bytes\nDecode content after decoding all stream filters.\nDecompress PDF stream objects.\nDelete object by object ID.\nDelete pages.\nDelete zero length stream objects.\nFollow references if the supplied object is a reference.\nAssociated stream dictionary\n0, 1 for italic, 2 for bold, 3 for italic bold\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet decoded page content;\nExtract object from dictionary, dereferencing the object …\nGet dictionary object by id.\nGet object by object id, will iteratively dereference a …\nGet mutable reference to object by object id, will …\nGet page object_id of the specified object object_id\nGet content of a page.\nGet content stream object ids of a page.\nGet fonts used by a page.\nGet resources used by a page.\nGet page numbers and corresponding object ids.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad a PDF document from a specified file path.\nLoad a PDF document from an arbitrary source.\nLoad a PDF document from a memory slice.\nCurrent maximum object id within Bookmarks.\nCurrent maximum object id within the document.\nCreate new PDF document.\nCreate an object ID.\nThe objects that make up the document contained in the …\nPrune all unused objects.\nThe cross-reference table contains locations of the …\nRemove PDF object from document’s object list.\nRenumber objects, normally called after …\nRenumber objects with a custom starting id, this is very …\nSave PDF document to specified file path.\nSave PDF to arbitrary target\nStream data’s position in PDF file.\nThe trailer gives the location of the cross-reference …\nTraverse objects from trailer recursively, return all …\nThe version of the PDF specification to which the file …\nDefault is that the stream may be compressed. On font …\nCreate new PDF document with version.\nDecode content operations.\nEncode content operations.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")