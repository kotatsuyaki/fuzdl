searchState.loadedDescShard("thirtyfour", 0, "Thirtyfour is a Selenium / WebDriver library for Rust, for …\nAdd key\nAlt key\nBackspace key\nCancel\nDynamic set of WebDriver capabilities.\nClear\nCommand key\nControl key\nType alias for a cookie::Cookie\nDecimal key\nDelete key\nDivide key\nDown arrow key\nWeb element reference.\nEnd key\nEnter key\nEquals key\nEscape key\nF1 key\nF10 key\nF11 key\nF12 key\nF2 key\nF3 key\nF4 key\nF5 key\nF6 key\nF7 key\nF8 key\nF9 key\nAn HTML form on the current page.\nHelp\nHome key\nInsert key\nKey codes for use with Actions.\nLeft arrow key\nMeta key\nMultiply key\nNull\nNumpad 0 key\nNumpad 1 key\nNumpad 2 key\nNumpad 3 key\nNumpad 4 key\nNumpad 5 key\nNumpad 6 key\nNumpad 7 key\nNumpad 8 key\nNumpad 9 key\nPage Down key\nPage Up key\nPause key\nReturn key\nRight arrow key\nSemicolon key\nSeparator key\nShift key\nSpace bar\nSubtract key\nStruct for switching between frames/windows/alerts.\nTab key\nTimeout configuration, for various timeout settings.\nUp arrow key\nThe <code>WebDriver</code> struct encapsulates an async Selenium …\nThe WebDriver status as returned by [<code>Client::status()</code>].\nThe WebElement struct encapsulates a single element on a …\nA handle to a browser window.\nAction chains allow for more complex user interactions …\nActions functionality for WebDriver.\nAlert handling.\nGet the specified attribute.\nGet the class name for this WebElement.\nClear the WebElement contents.\nClick the WebElement.\nGet back the <code>Client</code> hosting this <code>Form</code>.\nCommon wrappers used by both async and sync …\nComponents and component wrappers.\nGet the specified CSS property.\nGet the internal element id for this element.\nSwitch to the specified iframe element.\nError wrappers.\nExtensions for specific browsers.\nSearch for a child element of this WebElement using the …\nSearch for all child elements of this WebElement that …\nFocus this WebElement using JavaScript.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a <code>WebElement</code> from a JSON response and a session …\nGet the shadowRoot property of the current element.\nGet the id for this WebElement.\nGet the implicit wait timeout.\nGet the innerHtml property of this element.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if the WebElement is currently clickable …\nReturn true if the WebElement is currently displayed, …\nReturn true if the WebElement is currently enabled, …\nReturn true if the WebElement is currently (still) present …\nReturn true if the WebElement is currently selected, …\nThe current status message.\nCreate new timeout configuration.\nCreate a new WebDriver as follows:\nGet the outerHtml property of this element.\nGet the page load timeout.\nAllow importing the common types via …\nGet the specified property.\nReturn an ElementQuery instance for more executing …\nEnd the webdriver session and close the browser.\nTrue if the webdriver is ready to start a new session.\nGet the bounding rectangle for this WebElement.\nAlias for <code>WebElement::rect()</code>, for compatibility with …\n<code>resolve!(x)</code> expands to <code>x.resolve().await?</code>\n<code>resolve_present!(x)</code> expands to <code>x.resolve_present().await?</code>\nTake a screenshot of this WebElement and write it to the …\nTake a screenshot of this WebElement and return it as PNG …\nGet the script timeout.\nScroll this element into view using JavaScript.\nSend the specified input.\nEverything related to driving the underlying WebDriver …\nFind a form input using the given <code>locator</code> and set its …\nFind a form input with the given <code>name</code> and set its value to …\nSet the implicit wait timeout.\nSet the page load timeout.\nSet the script timeout.\nSubmit this form using the first available submit button.\nSubmit this form directly, without clicking any buttons.\nSubmit this form directly, without clicking any buttons, …\nSubmit this form using the form submit button with the …\nSubmit this form using the button matched by the given …\nMiscellaneous support functions for <code>thirtyfour</code> tests.\nGet the tag name for this WebElement.\nGet the text contents for this WebElement.\nSerialize this <code>WebElement</code> to JSON.\nMakes the given string a <code>WindowHandle</code>.\nMakes the given <code>String</code> a <code>WindowHandle</code>.\nMakes the given string a <code>WindowHandle</code>.\nConvenience method for getting the (optional) value …\nReturn an ElementWaiter instance for more executing …\nThe ActionChain struct allows you to perform multiple …\nClick and release the left mouse button.\nClick the left mouse button and hold it down.\nClick on the specified element using the left mouse button …\nClick on the specified element using the left mouse button …\nClick and release the right mouse button.\nClick on the specified element using the right mouse …\nDouble-click the left mouse button.\nDouble-click on the specified element.\nDrag the mouse cursor by the specified X and Y offsets.\nDrag the mouse cursor from the center of the source …\nDrag the mouse cursor by the specified X and Y offsets, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPress the specified key down.\nClick the specified element and then press the specified …\nRelease the specified key. This usually follows a …\nClick the specified element and release the specified key.\nMove the mouse cursor by the specified X and Y offsets.\nMove the mouse cursor to the specified X and Y coordinates.\nMove the mouse cursor to the center of the specified …\nMove the mouse cursor to the specified offsets relative to …\nCreate a new ActionChain struct.\nPerform the action sequence. No actions are actually …\nRelease the left mouse button.\nMove the mouse to the specified element and release the …\nReset all actions, reverting all input devices back to …\nSend the specified keystrokes to the active element.\nClick on the specified element and send the specified …\nThe action type associated with this <code>InputSource</code>.\nA sequence of actions to be performed.\nA list of action sequences to be performed via […\nPointer cancel action. Used to cancel the current pointer …\nKey down action.\nPointer button down.\nA source capable of providing inputs for a browser action …\nAn action performed with a keyboard.\nA sequence containing <code>Key</code> actions.\nLeft mouse button constant for use with <code>PointerAction</code>.\nMiddle mouse button constant for use with <code>PointerAction</code>.\nRight mouse button constant for use with <code>PointerAction</code>.\nA sequence containing <code>Pointer</code> actions for a mouse.\nMove the pointer relative to the current position.\nMove the pointer to a new position.\nMove the pointer to a position relative to the specified …\nAn action not associated with an input device (e.g. pause).\nA sequence containing <code>Null</code> actions.\nPause for the specified duration.\nPause action. Useful for adding pauses between other key …\nPause action. Useful for adding pauses between other key …\nA sequence containing <code>Pointer</code> actions for a pen device.\nAn action performed with a pointer device.\nA sequence containing <code>Pointer</code> actions for a touch device.\nKey up action.\nPointer button up.\nAppend the specified sequence to the list of sequences.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new NullActions sequence.\nCreate a new KeyActions sequence.\nCreate a new <code>MouseActions</code> sequence.\nCreate a new <code>PenActions</code> sequence.\nCreate a new <code>TouchActions</code> sequence.\nAdd a pause action to the sequence for this input source.\nAdd the specified action to the sequence for this input …\nThe pause duration, given in milliseconds.\nThe key code, e.g. <code>&#39;a&#39;</code>. See the [<code>Key</code>] enum for special key …\nThe key code, e.g. <code>&#39;a&#39;</code>. See the [<code>Key</code>] enum for special key …\nThe pause duration.\nThe mouse button index.\nThe mouse button index.\nThe pause duration, given in milliseconds.\nThe move duration.\nThe move duration.\nThe move duration.\nThe element to move the pointer in relation to. The <code>x</code> and <code>y</code>…\n<code>x</code> offset, in pixels.\n<code>x</code> offset, in pixels.\n<code>x</code> offset, in pixels.\n<code>y</code> offset, in pixels.\n<code>y</code> offset, in pixels.\n<code>y</code> offset, in pixels.\nStruct for managing alerts.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new Alert struct. This is typically created …\nAdd the specified command-line argument to <code>chromedriver</code>. …\nAdd the specified Chrome option. This is a helper method …\nAdd a base64-encoded extension.\nAdd Chrome extension file. This will be a file with a .CRX …\nReturns the argument unchanged.\nGet the current list of command-line arguments to …\nGet the path to the chrome binary (if one was previously …\nGet the specified Chrome option.\nGet the current debugger address (if one was previously …\nGet the current list of Chrome extensions as a vec. Each …\nCalls <code>U::from(self)</code>.\nCreate a new ChromeCapabilities struct.\nRemove the specified Chrome command-line argument if it …\nRemove the specified base64-encoded extension if it had …\nRemove the specified Chrome extension file if an identical …\nSet the path to chrome binary to use.\nSet the debugger address.\nSet disable web security.\nSet the browser to run headless.\nSet ignore certificate errors.\nUnset disable web security.\nUnset the headless option.\nUnset ignore certificate errors.\nThe DesiredCapabilities struct provides a generic way to …\nWait for the DOMContentLoaded event (html content …\nReturn immediately after the initial page content is fully …\nWait for full page loading (the default).\nGet an immutable reference to the underlying …\nGet a mutable reference to the underlying …\nSet whether the session should accept all SSL certificates …\nAdd any Serialize-able object to the capabilities under …\nAdd any Serialize-able object to the capabilities under …\nCreate a ChromeCapabilities struct.\nGet whether the session supports CSS selectors when …\nCreate an EdgeCapabilities struct.\nCreate a FirefoxCapabilities struct.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet whether the session can interact with modal popups …\nCreate an InternetExplorerCapabilities struct.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new custom DesiredCapabilities struct. Generally …\nCreate an OperaCapabilities struct.\nRemove a subkey from the specified key, if it exists.\nCreate a SafariCapabilities struct.\nSet whether the session can interact with the application …\nSet whether the session can query for the browser’s …\nSet whether the session can interact with database storage.\nSet whether elements are scrolled into the viewport for …\nSet whether the session supports executing user-supplied …\nSet whether the session can set and query the browser’s …\nSet whether the session is capable of generating native …\nSet the desired browser platform.\nSet the proxy to use.\nSet whether the session can rotate the current page’s …\nSet the behaviour to be followed when an unexpected alert …\nSet the desired browser version.\nSet whether the session supports interactions with local …\nAdd all keys of the specified object into the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAdd the specified command-line argument to <code>geckodriver</code>.\nAdd the specified firefox option. This is a helper method …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the current list of command-line arguments to …\nGet the specified Firefox option.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the specified firefox preference. This is a helper …\nSets accept untrusted certs\nSets assume untrusted issuer\nSet the path to the firefox binary.\nSet the browser to run headless.\nSets the load strategy\nSets the log driver\nSets the log file\nSet the <code>geckodriver</code> log level.\nSet the selenium logging preferences. To set the …\nSet the page load strategy to use. Valid values are: <code>normal</code>…\nSet the firefox preferences to use.\nSets the user agent\nSets the webdriver port\nUnsets the specified firefox preference. This is a helper …\nUnsets accept untrusted certs\nUnsets assume untrusted issuer\nUnsets the load strategy\nUnsets the log driver\nUnsets the log file\nUnsets the user agent\nUnsets the webdriver port\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFunction signature for element predicates.\nGeneric element query function that returns some type T.\nHelper to Deserialize ElementRef from JSON Value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>Component</code> trait is automatically implemented by the …\nDerive macro for a wrapped <code>Component</code>.\nElement resolver that can resolve a particular element or …\nType alias for <code>ElementResolver&lt;Vec&lt;WebElement&gt;&gt;</code> for …\nType alias for <code>ElementResolver&lt;WebElement&gt;</code>, for …\nConvenience wrapper for <code>&lt;select&gt;</code> elements.\nReturn a vec of all selected options belonging to this …\nDeselect all options for this select tag.\nDeselect all options with visible text exactly matching …\nDeselect the option matching the specified index. This is …\nDeselect all options with visible text partially matching …\nDeselect options matching the specified value.\nDeselect options with visible text matching the specified …\nDeselect options matching the specified XPath condition. …\nEscape the specified string for use in Css or XPath …\nReturn the first selected option in this select tag.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvalidate any cached element(s).\nInstantiate a new SelectElement struct. The specified …\nCreate new element resolver that returns all components, …\nCreate new element resolver that returns all elements, if …\nCreate new element resolver that returns all elements (if …\nCreate new element resolver that returns all components …\nCreate new multi element resolver using a custom resolver …\nCreate new element resolver using custom resolver function.\nCreate new multi component resolver using a custom …\nCreate new component resolver using custom resolver …\nCreate new element resolver that returns the first element.\nCreate new element resolver that returns the first …\nCreate new element resolver that returns the first …\nCreate new element resolver that returns the first …\nCreate new element resolver that returns at least one …\nCreate new element resolver that returns at least one …\nCreate new element resolver that returns at least one …\nCreate new element resolver that returns at least one …\nCreate new element resolver that must return a single …\nCreate new element resolver that must return a single …\nCreate new element resolver that must return a single …\nCreate new element resolver that must return a single …\nReturn a vec of all options belonging to this select tag.\nReturn the cached element(s) if any, otherwise run the …\n<code>resolve!(x)</code> expands to <code>x.resolve().await?</code>\nRun the query, ignoring any cached element(s).\nValidate the element and repeat the query if it is not …\nValidate the component and repeat the query if it is not …\nValidate all components and repeat the query if any are …\nValidate all elements and repeat the query if any are not …\n<code>resolve_present!(x)</code> expands to <code>x.resolve_present().await?</code>\nSelect all options for this select tag.\nSelect options with visible text exactly matching the …\nSelect the option matching the specified index. This is …\nSelect options with visible text partially matching the …\nSelect options matching the specified value.\nSelect options with visible text matching the specified …\nSelect options matching the specified XPath condition. …\nValidate that the cached element is present, and if so, …\nValidate that all cached elements are present, if any.\nValidate that the cached component is present, and if so, …\nValidate that all cached components are present, if any.\nContains the error value\nContains the success value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nExtensions for working with Firefox Addons.\nExtensions for Chrome Devtools Protocol\nAdvanced query interface featuring powerful filtering and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nTake a full-page screenshot of the current window and …\nTake a full-page screenshot of the current window and …\nInstall the specified firefox add-on.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new FirefoxTools struct.\nThe ChromeDevTools struct allows you to interact with …\nExecute the specified command without parameters. For …\nExecute the specified command with the specified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the issue message for any issue in a cast session.\nGet the current network conditions. You must set the …\nGet the list of sinks available for cast.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLaunch the Chrome app with the specified id.\nCreate a new ChromeDevTools struct.\nSet the network conditions.\nSet the specified sink as the cast session receiver target.\nStart a tab mirroring session on the specified receiver …\nStop the existing cast session on the specified receiver …\nTrait for implementing the element polling strategy.\nNo polling, single attempt.\nPoll up to the specified timeout, with the specified …\nHigh-level interface for performing powerful element …\nAll options applicable to an ElementQuery.\nElements can be queried from either a WebDriver or from a …\nOptions for wait characteristics for an element query.\nTrait for enabling the ElementQuery interface.\nAn ElementSelector contains a selector method (By) as well …\nTrait for enabling the ElementWaiter interface.\nHigh-level interface for performing explicit waits using …\nTrait for returning a struct that implements ElementPoller.\nDo not wait. This uses a poller that quits immediately.\nUse a poller with the specified timeout and interval.\nUse the default poller.\nAdd the specified filter to the list of filters for this …\nReturn all WebElements that match any one selector …\nReturn all WebElements that match any one selector …\nOnly match elements that are clickable.\nOnly match elements that are displayed.\nOnly match elements that are enabled.\nOnly match elements that are NOT clickable.\nOnly match elements that are NOT displayed.\nOnly match elements that are NOT enabled.\nOnly match elements that are NOT selected.\nOnly match elements that are selected.\nProvide a name that will be included in the error message …\nSet the description to be used in error messages for this …\nProvide a human-readable error message to be returned in …\nReturn true if an element matches any selector, otherwise …\nReturn only the first WebElement that matches any selector …\nReturn the first WebElement that matches any selector …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBy default a query will ignore any errors that occur while …\nSet whether to ignore errors when querying elements.\nBy default a waiter will ignore any errors that occur …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if no element matches any selector, otherwise …\nForce this ElementQuery to not wait for the specified …\nProvide the options to use with this query.\nAdd a new selector to this ElementQuery. All conditions …\nSet the description to be used in error messages for this …\nSet whether to ignore errors when querying elements.\nSet the wait options for this element query.\nReturn only a single WebElement that matches any selector …\nForce this ElementQuery to wait for the specified timeout, …\nSet the wait options for this element query.\nForce this ElementWaiter to wait for the specified …\nOnly match elements that have the specified attribute with …\nOnly match elements that have all of the specified …\nOnly match elements that contain the specified class name. …\nOnly match elements that have all of the specified CSS …\nOnly match elements that have the specified CSS property …\nAdd the specified ElementPredicate to the last selector.\nOnly match elements that have the specified id. See the …\nUse the specified ElementPoller for this ElementQuery. …\nUse the specified ElementPoller for this ElementWaiter. …\nOnly match elements that have all of the specified …\nOnly match elements that have the specified property with …\nOnly match elements that have the specified tag. See the …\nOnly match elements that have the specified text. See the …\nOnly match elements that have the specified value. See the …\nOnly match elements that do not have the specified …\nOnly match elements that do not have any of the specified …\nOnly match elements that do not contain the specified …\nOnly match elements that do not have any of the specified …\nOnly match elements that do not have the specified CSS …\nOnly match elements that do not have the specified id. See …\nOnly match elements that do not have any of the specified …\nOnly match elements that do not have the specified …\nOnly match elements that do not have the specified tag. …\nOnly match elements that do not have the specified text. …\nOnly match elements that do not have the specified value. …\nPredicate that returns true for elements that have the …\nPredicate that returns true for elements that have all of …\nPredicate that returns true for elements that have the …\nPredicate that returns true for elements that have all of …\nPredicate that returns true for elements that have the …\nPredicate that returns true for elements that have all of …\nPredicate that returns true for elements that have the …\nPredicate that returns true for elements that have the …\nPredicate that returns true for elements that have the …\nPredicate that returns true for elements that are …\nPredicate that returns true for elements that are …\nPredicate that returns true for elements that are enabled.\nPredicate that returns true for elements that are not …\nPredicate that returns true for elements that are not …\nPredicate that returns true for elements that are not …\nPredicate that returns true for elements that are not …\nPredicate that returns true for elements that are selected.\nPredicate that returns true for elements that lack the …\nPredicate that returns true for elements that do not have …\nPredicate that returns true for elements that do not …\nPredicate that returns true for elements that do not have …\nPredicate that returns true for elements that lack the …\nPredicate that returns true for elements that do not have …\nPredicate that returns true for elements that lack the …\nPredicate that returns true for elements that do not …\nPredicate that returns true for elements that do not …\nAdd key\nAlt key\nBackspace key\nCancel\nDynamic set of WebDriver capabilities.\nClear\nCommand key\nControl key\nType alias for a cookie::Cookie\nDecimal key\nDelete key\nDivide key\nDown arrow key\nEnd key\nEnter key\nEquals key\nEscape key\nF1 key\nF10 key\nF11 key\nF12 key\nF2 key\nF3 key\nF4 key\nF5 key\nF6 key\nF7 key\nF8 key\nF9 key\nHelp\nHome key\nInsert key\nKey codes for use with Actions.\nLeft arrow key\nMeta key\nMultiply key\nNull\nNumpad 0 key\nNumpad 1 key\nNumpad 2 key\nNumpad 3 key\nNumpad 4 key\nNumpad 5 key\nNumpad 6 key\nNumpad 7 key\nNumpad 8 key\nNumpad 9 key\nPage Down key\nPage Up key\nPause key\nReturn key\nRight arrow key\nSemicolon key\nSeparator key\nShift key\nSpace bar\nSubtract key\nStruct for switching between frames/windows/alerts.\nTab key\nTimeout configuration, for various timeout settings.\nUp arrow key\nA handle to a browser window.\nCreate a new SwitchTo struct. This is typically created …\nThe SessionHandle contains a shared reference to the …\nAccept the active alert.\nCreate a new action chain for this session.\nReturn the element with focus, or the <code>&lt;body&gt;</code> element if …\nAdd the specified cookie.\nGo back. This is equivalent to clicking the browser’s …\nClose the current window or tab. This will close the …\nGet the current URL.\nDelete all cookies.\nDelete the specified cookie.\nDismiss the active alert.\nSwitch to the default frame.\nSwitch to an iframe by index. The first iframe on the page …\nSwitch to the parent frame.\nExecute the specified Javascript synchronously and return …\nExecute the specified Javascrypt asynchronously and return …\nSearch for an element on the current page using the …\nSearch for all elements on the current page that match the …\nLocate a form on the page.\nGo forward. This is equivalent to clicking the browser’s …\nReturns the argument unchanged.\nMake the current window fullscreen.\nGet the active alert text.\nGet all cookies.\nGet the specified cookie.\nGet all timeouts for the current session.\nGet the current window rectangle, in pixels.\nNavigate to the specified URL.\nExecute the specified function in a new browser tab, …\nCalls <code>U::from(self)</code>.\nMaximize the current window.\nMinimize the current window.\nSwitch to a new tab.\nSwitch to a new window.\nCreate a new Actions chain.\nReturn an ElementQuery instance for more executing …\nRefresh the current page.\nTake a screenshot of the current window and write it to …\nTake a screenshot of the current window and return it as …\nSend the specified keys to the active alert.\nGet the session ID.\nSet the implicit wait timeout.\nSet the page load timeout.\nSet the script timeout.\nSet the current window name.\nSet the current window rectangle, in pixels.\nGet the page source as a String.\nGet the WebDriver status.\nReturn a SwitchTo struct for switching to another window …\nSwitch to the window with the specified name. This uses …\nSwitch to the specified window.\nGet the page title as a String.\nSet all timeouts for the current session.\nGet the current window handle.\nGet all window handles for the current session.\nHelper struct for getting return values from scripts.\nGet a single WebElement return value.\nGet a vec of WebElements from the return value.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet the raw JSON value.\nCreate a new ScriptRet.")