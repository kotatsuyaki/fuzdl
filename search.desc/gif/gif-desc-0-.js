searchState.loadedDescShard("gif", 0, "GIF en- and decoding library Build Status\nStreamingDecoder is not required to take any action.\nA newtype wrapper around an arbitrary extension ID.\nApplication extension.\nRestore to background color.\nIndex of the background color in the global palette.\nKnown GIF block labels.\nDecoded the last (or only) sub-block of a block.\nThe start of a block.\nStreamingDecoder configuration parameters Output mode for …\nComment extension.\nControl extension. Use <code>ExtensionData::new_control_ext</code> to …\nControl extension.\nDecoded some data of the current frame.\nNo more data available the current frame.\nOptions for opening a GIF decoder.\nIndicates whether a certain object has been decoded\nGIF decoder\nDecoding error.\nAn error returned in the case of the image not being …\nDisposal method\nGIF encoder.\nEncoding error.\nKnown GIF extension labels.\nExtension block.\nExtension data.\nStreamingDecoder configuration parameters Configures how …\nFinite number of repetitions\nReturned if the image is found to be malformed.\nReturned if the to image is not encodable as a gif.\nA GIF frame\nDecoded all information of the next frame.\nGlobal palette.\nImage block.\nThe decoder returns the raw indexed data.\nInfinite number of repetitions\nWraps <code>std::io::Error</code>.\nWraps <code>std::io::Error</code>.\nDo not dispose.\nStreamingDecoder configuration parameters Memory limit in …\nEnforce no memory limit.\nDecoded nothing.\nRestore to previous.\nThe decoder expands the image data to 32bit RGBA. This …\nNumber of repetitions\nSets the number of repetitions\nSaves all extention data\nSkips the data of unknown extensions and extracts the data …\nGIF decoder which supports streaming\nDecoded a sub-block. More sub-block are available.\nPlain Text extension.\nImage trailer.\nDecoded the image trailer.\nVersion 87a, from May 1987.\nVersion 89a, from July 1989.\nOne version number of the GIF standard.\nConfigure if unknown blocks are allowed to be decoded.\nIndex of the background color in the global palette\nBuffer containing the image data. Only indices unless …\nOutput buffer size\nReturn a builder that allows configuring limits etc.\nConfigure if frames must be within the screen descriptor.\nConfigure if LZW encoded blocks must end with a marker end …\nCurrent frame info as a ref.\nCurrent frame info as a mutable ref.\nFrame delay in units of 10 ms.\nDisposal method.\nReads data of the current frame into a pre-allocated …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a frame from indexed pixels in the global palette.\nCreates a frame from a palette and indexed pixels.\nCreates a frame from pixels in RGB format.\nCreates a frame from pixels in RGB format.\nCreates a frame from pixels in RGBA format.\nCreates a frame from pixels in RGBA format.\nConverts <code>u8</code> to <code>Option&lt;Self&gt;</code>\nConverts <code>u8</code> to <code>Option&lt;Self&gt;</code>\nConverts <code>u8</code> to a <code>Extension</code> if it is known.\nGets a mutable reference to the writer instance used by …\nGets a reference to the writer instance used by this …\nThe global color palette\nHeight of the image\nHeight of the image\nHeight of the frame.\nTrue if the image is interlaced.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns writer instance used by this encoder\nDecode the label as a known extension.\nReturns the data of the last extension that has been …\nOffset from the left border of the canvas.\nLine length of the current frame\nTrue if the frame needs user input to be displayed.\nCreates a new streaming decoder\nCreate a new decoder with default options.\nCreates a new encoder.\nCreates a new decoder builder\nConstructor for control extension data.\nReturns the next frame info\nReturns the color palette relevant for the current (next) …\nFrame local color palette if available.\nReads the logical screen descriptor including the global …\nReads the data of the current frame into a pre-allocated …\nReads the next frame from the image.\nConfigure how color data is decoded.\nConfigure whether extensions are saved or skipped.\nConfigure a memory limit for decoding.\nWrite an extension block that signals a repeat behaviour.\nOffset from the top border of the canvas.\nTransparent index (if available).\nUpdates the internal state of the decoder.\nThe version number of the GIF standard used in this image.\nWidth of the image\nWidth of the image\nWidth of the frame.\nWrites an extension to the image.\nWrites a frame to the image.\nWrites the global color palette.\nWrites a raw extension to the image.\nFrame delay.\nFlags.\nTransparent index.")