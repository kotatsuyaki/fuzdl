searchState.loadedDescShard("memchr", 0, "This library provides heavily optimized routines for …\nAn iterator for <code>memchr</code>.\nAn iterator for <code>memchr2</code>.\nAn iterator for <code>memchr3</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSearch for the first occurrence of a byte in a slice.\nLike <code>memchr</code>, but searches for either of two bytes instead …\nAn iterator over all occurrences of the needles in a …\nLike <code>memchr</code>, but searches for any of three bytes instead …\nAn iterator over all occurrences of the needles in a …\nAn iterator over all occurrences of the needle in a …\nThis module provides forward and reverse substring search …\nSearch for the last occurrence of a byte in a slice.\nLike <code>memrchr</code>, but searches for either of two bytes instead …\nAn iterator over all occurrences of the needles in a …\nLike <code>memrchr</code>, but searches for any of three bytes instead …\nAn iterator over all occurrences of the needles in a …\nAn iterator over all occurrences of the needle in a …\nCreates a new iterator that yields all positions of needle …\nCreates a new iterator that yields all positions of needle …\nCreate a new <code>Memchr3</code> that’s initialized to zero with a …\nAutomatically detect whether a heuristic prefilter should …\nAn iterator over non-overlapping substring matches.\nAn iterator over non-overlapping substring matches in …\nA single substring searcher fixed to a particular needle.\nA builder for constructing non-default forward or reverse …\nA single substring reverse searcher fixed to a particular …\nNever used a prefilter in substring search.\nPrefilter controls whether heuristics are used to …\nConvert this finder into its borrowed variant.\nConvert this finder into its borrowed variant.\nBuild a forward finder using the given needle from the …\nBuild a reverse finder using the given needle from the …\nReturns the index of the first occurrence of the given …\nReturns the index of the first occurrence of this needle …\nReturns an iterator over all non-overlapping occurrences …\nReturns an iterator over all occurrences of a substring in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this iterator into its owned variant, such that it …\nConvert this iterator into its owned variant, such that it …\nConvert this finder into its owned variant, such that it …\nConvert this finder into its owned variant, such that it …\nReturns the needle that this finder searches for.\nReturns the needle that this finder searches for.\nCreate a new finder for the given needle.\nCreate a new reverse finder for the given needle.\nCreate a new finder builder with default settings.\nConfigure the prefilter setting for the finder.\nReturns the index of the last occurrence of the given …\nReturns the index of the last occurrence of this needle in …\nReturns a reverse iterator over all non-overlapping …\nReturns a reverse iterator over all occurrences of a …")