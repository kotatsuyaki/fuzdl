searchState.loadedDescShard("image", 0, "Overview\nPixel is 8-bit alpha\nAnimationDecoder trait\nAn Image in AVIF format.\nPixel contains 8-bit B, G and R channels\nPixel is 8-bit BGR with an alpha channel\nAn Image in BMP Format\nAn Image in BMP Format\nThe number of channels of this pixel type.\nA string that can help to interpret the meaning each …\nThis pixel has the format of one of the predefined …\nAn enumeration over supported color types and bit depths\nThe maximum value for this type of primitive within the …\nThe minimum value for this type of primitive within the …\nAn Image in DDS Format\nThe delay of a frame relative to the previous one.\nA Dynamic Image\nTypes which are safe to treat as an immutable byte slice …\nAn enumeration of color types encountered in image formats.\nAn Image in farbfeld Format\nAn Image in farbfeld Format\nA single animation frame\nAn implementation dependent iterator, reading the frames …\nA trait for manipulating images.\nTrait to inspect an image.\nAn Image in GIF Format\nAn Image in GIF Format\nSendable grayscale + alpha channel image buffer\nSendable grayscale image buffer\nAn Image in Radiance HDR Format\nAn Image in ICO Format\nAn Image in ICO Format\nGeneric image buffer\nThe trait that all decoders implement\nSpecialized image decoding not be supported by all formats\nThe trait all encoders implement\nAn enumeration of supported image formats. Not all formats …\nEach pixel in this image is 16-bit Luma\nEach pixel in this image is 8-bit Luma\nEach pixel in this image is 16-bit Luma with alpha\nEach pixel in this image is 8-bit Luma with alpha\nAn enumeration of supported image formats for encoding.\nEach pixel in this image is 16-bit Rgb\nEach pixel in this image is 32-bit float Rgb\nEach pixel in this image is 8-bit Rgb\nEach pixel in this image is 16-bit Rgb with alpha\nEach pixel in this image is 32-bit float Rgb with alpha\nEach pixel in this image is 8-bit Rgb with alpha\nAn Image in JPEG Format\nAn Image in JPEG Format with specified quality\nPixel is 1-bit luminance\nPixel is 16-bit luminance\nPixel is 16-bit luminance\nPixel is 2-bit luminance\nPixel is 4-bit luminance\nPixel is 8-bit luminance\nPixel is 8-bit luminance\nPixel is 1-bit luminance with an alpha channel\nPixel is 16-bit luminance with an alpha channel\nPixel is 16-bit luminance with an alpha channel\nPixel is 2-bit luminance with an alpha channel\nPixel is 4-bit luminance with an alpha channel\nPixel is 8-bit luminance with an alpha channel\nPixel is 8-bit luminance with an alpha channel\nGrayscale colors.\nGrayscale colors + alpha channel\nAn Image in OpenEXR Format\nAn Image in OpenEXR Format\nA generalized pixel.\nThe type of pixel.\nThe pixel with an associated <code>ColorType</code>. Not all possible …\nImmutable pixel iterator\nAn Image in PNG Format\nAn Image in PNG Format\nAn Image in general PNM Format\nAn Image in one of the PNM Formats\nThe type of each channel in a pixel. For example, this can …\nRepresents the progress of an image operation.\nThe type of reader produced by <code>into_reader</code>.\nRGB colors.\nPixel contains 1-bit R, G and B channels\nPixel is 16-bit RGB\nPixel contains 16-bit R, G and B channels\nPixel contains 2-bit R, G and B channels\nPixel is 32-bit float RGB\nPixel is 32-bit float RGB\nAn image buffer for 32-bit float RGB pixels, where the …\nPixel contains 4-bit R, G and B channels\nPixel contains 8-bit R, G and B channels\nPixel contains 8-bit R, G and B channels\nSendable Rgb image buffer\nRGB colors + alpha channel\nPixel is 1-bit RGB with an alpha channel\nPixel is 16-bit RGBA\nPixel is 16-bit RGB with an alpha channel\nPixel is 2-bit RGB with an alpha channel\nPixel is 32-bit float RGBA\nPixel is 32-bit float RGBA\nAn image buffer for 32-bit float RGBA pixels, where the …\nPixel is 4-bit RGB with an alpha channel\nPixel is 8-bit RGB with an alpha channel\nPixel is 8-bit RGB with an alpha channel\nSendable Rgb + alpha channel image buffer\nA View into another image\nThe scalar type that is used to store each channel in this …\nAn Image in TGA Format\nAn Image in TGA Format\nAn Image in TIFF Format\nAn Image in TIFF Format\nPixel is of unknown color type with the specified bits per …\nA value for signalling an error: An unsupported format was …\nAn Image in WEBP Format\nAdjust the contrast of this image. <code>contrast</code> is the amount …\nApply the function <code>f</code> to each channel of this pixel.\nApply the function <code>f</code> to each channel of this pixel and …\nApply the function <code>f</code> to each channel except the alpha …\nApply the function <code>f</code> to each channel except the alpha …\nApply the function <code>f</code> to each channel except the alpha …\nGet the bytes of this value.\nReturn this image’s pixels as a native endian byte slice.\nReturn a view on the raw sample buffer.\nReturn a view on the raw sample buffer for 32bit per …\nReturn a mutable view on the raw sample buffer.\nReturn a view on the raw sample buffer for 16 bit per …\nReturn a view on the raw sample buffer for 8 bit per …\nReturn a reference to an 16bit Grayscale image\nReturn a reference to an 8bit Grayscale image\nReturn a reference to an 16bit Grayscale image with an …\nReturn a reference to an 8bit Grayscale image with an …\nReturn a mutable reference to an 16bit Grayscale image\nReturn a mutable reference to an 8bit Grayscale image\nReturn a mutable reference to an 16bit Grayscale image …\nReturn a mutable reference to an 8bit Grayscale image with …\nReturn a mutable reference to an 16bit RGB image\nReturn a mutable reference to an 32bit RGB image\nReturn a mutable reference to an 8bit RGB image\nReturn a mutable reference to an 16bit RGBA image\nReturn a mutable reference to an 16bit RGBA image\nReturn a mutable reference to an 8bit RGBA image\nReturns the underlying raw buffer\nReturn a reference to an 16bit RGB image\nReturn a reference to an 16bit RGB image\nReturn a reference to an 8bit RGB image\nReturn a reference to an 16bit RGBA image\nReturn a reference to an 32bit RGBA image\nReturn a reference to an 8bit RGBA image\nReturns the number of bits contained in a pixel of …\nBlend the color of a given pixel into ourself, taking into …\nPut a pixel at location (x, y), taking into account alpha …\nPut a pixel at location (x, y), taking into account alpha …\nPerforms a Gaussian blur on this image. <code>sigma</code> is a measure …\nThe bounding rectangle of this image.\nBrighten the pixels of this image. <code>value</code> is the amount to …\nIterators and other auxiliary structure for the <code>ImageBuffer</code>…\nReturns the image buffer\nReturns a mutable image buffer\nReturns the number of bytes contained in a pixel of …\nReturn if the ImageFormat can be decoded by the lib.\nReturn if the ImageFormat can be encoded by the lib.\nChange the coordinates of this subimage.\nReturns the number of color channels that make up this …\nGet the number of channels for colors of this type.\nReturns the components as a slice.\nReturns the channels of this pixel as a 4 tuple. If the …\nReturns the components as a mutable slice\nEncoding and decoding for various image file formats.\nSteps through the iterator from the current frame until …\nReturn this image’s color type.\nReturns the color type of the image data produced by this …\nExamples\nCopies all of the pixels from another image into this …\nCopies all of the pixels from another image into this …\nCopies all of the pixels from one part of this image to …\nCopies all of the pixels from one part of this image to …\nReturn a cut-out of this image delimited by the bounding …\nReturn a cut-out of this image delimited by the bounding …\nA measure of completed decoding.\nDelay of this frame\nReturns a tuple containing the width and height of the …\nThe width and height of this image.\nThe width and height of this image.\nEnumerates over the pixels of the image. The iterator …\nEnumerates over the pixels of the image. The iterator …\nEnumerates over the rows of the image. The iterator yields …\nEnumerates over the rows of the image. The iterator yields …\nContains detailed error representation.\nExpands a color palette by re-using the existing buffer. …\nExpands a color palette by re-using the existing buffer. …\nReturn a list of applicable extensions for this format.\nFilters this image with the specified 3x3 kernel.\nImage representations for ffi.\nFlip this image horizontally\nFlip this image vertically\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a pixel from the 4 channels a, b, c and d. If …\nDecodes an encoded image into a dynamic image.\nReturn the image format specified by a path’s file …\nConstructs a new ImageBuffer by repeated application of …\nReturn the image format specified by a MIME type.\nCreate a delay from a ratio of milliseconds.\nContructs a new frame\nReturn the image format specified by the path’s file …\nConstructs a new ImageBuffer by copying a pixel\nContructs a buffer from a generic container (for example a …\nConvert from a duration, clamped between 0 and an …\nReturns a view into a slice.\nReturns mutable view into a mutable slice.\nCreates an image buffer out of an existing buffer. Returns …\nReturns the pixel located at (x, y). Indexed from top left.\nGets a reference to the pixel at location <code>(x, y)</code>\nGets a reference to the pixel at location <code>(x, y)</code> or …\nGets a reference to the mutable pixel at location <code>(x, y)</code>. …\nGets a reference to the mutable pixel at location <code>(x, y)</code>\nDo not use is function: It is unimplemented!\nGets a reference to the mutable pixel at location <code>(x, y)</code> …\nReturn a grayscale version of this image. Returns <code>Luma</code> …\nGuess image format from memory block\nReturns if there is an alpha channel.\nReturns false if the color scheme is grayscale, true …\nThe height of this image.\nThe height of this image.\nThe height of this image.\nReturns the height of the underlying image\nHue rotate the supplied image. <code>value</code> is the degrees to …\nRead a tuple containing the (width, height) of the image …\nImage Processing Functions\nReturns true if this x, y coordinate is contained inside …\nReturns true if this x, y coordinate is contained inside …\nGet a reference to the underlying image.\nGet a mutable reference to the underlying image.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the image buffer\nReturn this image’s pixels as a byte vector. If the …\nReturn the raw sample buffer with its stride an dimension …\nConsume the decoder producing a series of frames.\nConsume the image and returns a Luma image.\nConsume the image and returns a Luma image.\nConsume the image and returns a LumaA image.\nConsume the image and returns a LumaA image.\nReturns the underlying raw buffer\nReturns a reader that can be used to obtain the bytes of …\nConsume the image and returns a RGB image.\nConsume the image and returns a RGB image.\nConsume the image and returns a RGB image.\nConsume the image and returns a RGBA image.\nConsume the image and returns a RGBA image.\nConsume the image and returns a RGBA image.\nConsumes the image buffer and returns the underlying data …\nInvert this pixel\nInvert the colors of this image. This method operates …\nInput and output of images.\nReturns the x offset\nCreate a new image from a Reader.\nCreate a new image from a byte slice\nCreate a new image from a byte slice\nApply the function <code>f</code> to each channel of this pixel.\nApply the function <code>f</code> to each channel of this pixel and …\nApply the function <code>f</code> to each channel except the alpha …\nApply the function <code>f</code> to each channel except the alpha …\nApply the function <code>f</code> to each channel except the alpha …\nMathematical helper functions and types.\nCreates a new <code>Frames</code> from an implementation specific …\nContructs a new frame without any delay.\nCreates a new image buffer based on a <code>Vec&lt;P::Subpixel&gt;</code>.\nConstruct a new subimage The coordinates set the position …\nCreates a dynamic image backed by a buffer of gray pixels.\nCreates a dynamic image backed by a buffer of gray pixels.\nCreates a dynamic image backed by a buffer of gray pixels …\nCreates a dynamic image backed by a buffer of gray pixels …\nCreates a dynamic image backed by a buffer of RGB pixels.\nCreates a dynamic image backed by a buffer of RGB pixels.\nCreates a dynamic image backed by a buffer of RGB pixels.\nCreates a dynamic image backed by a buffer of RGBA pixels.\nCreates a dynamic image backed by a buffer of RGBA pixels.\nCreates a dynamic image backed by a buffer of RGBA pixels.\nThe numerator and denominator of the delay in milliseconds.\nOpen the image located at the path specified. The image’…\nRetuns the color type of the image file before decoding\nRetuns the color type of the image file before decoding\nReturns an Iterator over the pixels of this image. The …\nReturns an Iterator over the pixels of this image. The …\nReturns an iterator over the pixels of this image. The …\nReturns an iterator over the mutable pixels of this image.\nPut a pixel at location (x, y). Indexed from top left.\nPuts a pixel at location <code>(x, y)</code>\nReturns all the bytes in the image.\nReturns all the bytes in the image.\nSame as <code>read_image</code> but periodically calls the provided …\nSame as <code>read_image</code> but periodically calls the provided …\nDecode a rectangular section of the image; see …\nDecode a rectangular section of the image; see …\nDecode a rectangular section of the image, periodically …\nCalculate a measure for remaining decoding work.\nResize this image using the specified filter algorithm. …\nResize this image using the specified filter algorithm. …\nResize this image using the specified filter algorithm. …\nRotate this image 180 degrees clockwise.\nRotate this image 270 degrees clockwise.\nRotate this image 90 degrees clockwise.\nReturns an iterator over the rows of this image.\nReturns an iterator over the mutable rows of this image.\nGet the format of the buffer when viewed as a matrix of …\nSaves the buffer to a file at the path specified.\nSaves the buffer to a file at the path specified.\nSaves the supplied buffer to a file at the path specified.\nSaves the supplied buffer to a file at the path specified …\nSaves the buffer to a file at the specified path in the …\nSaves the buffer to a file at the specified path in the …\nReturns the minimum number of bytes that can be …\nReturns the minimum number of bytes that can be …\nSet decoding limits for this decoder. See <code>Limits</code> for the …\nSet decoding limits for this decoder. See <code>Limits</code> for the …\nReturns a mutable subimage that is a view into this image. …\nReturns a mutable subimage that is a view into this image. …\nCreate a mutable sub-view of the image.\nScale this image down to fit within a specific size. …\nScale this image down to a specific size. Returns a new …\nReturn a copy of this image’s pixels as a byte vector. …\nConvert this subimage to an ImageBuffer\nConvert this pixel to luma\nReturns a copy of this image as a Luma image.\nReturns a copy of this image as a Luma image.\nReturns a copy of this image as a Luma image.\nConvert this pixel to luma with an alpha channel\nReturns a copy of this image as a LumaA image.\nReturns a copy of this image as a LumaA image.\nReturns a copy of this image as a LumaA image.\nConvert this pixel to RGB\nReturns a copy of this image as an RGB image.\nReturns a copy of this image as an RGB image.\nReturns a copy of this image as an RGB image.\nConvert this pixel to RGB with an alpha channel\nReturns a copy of this image as an RGBA image.\nReturns a copy of this image as an RGBA image.\nReturns a copy of this image as an RGBA image.\nReturns the y offset\nA measure of all necessary decoding work.\nReturns the total number of bytes in the decoded image.\nReturns the total number of bytes in the decoded image.\nReturns the pixel located at (x, y). Indexed from top left.\nReturns the pixel located at (x, y). Indexed from top left.\nReturns the pixel located at (x, y), ignoring bounds …\nPuts a pixel at location (x, y). Indexed from top left.\nPuts a pixel at location (x, y). Indexed from top left.\nPuts a pixel at location (x, y), ignoring bounds checking.\nPerforms an unsharpen mask on this image. <code>sigma</code> is the …\nReturns a subimage that is an immutable view into this …\nReturns a subimage that is an immutable view into this …\nCreate a sub-view of the image.\nThe width of this image.\nThe width of this image.\nThe width of this image.\nReturns the width of the underlying image\nWrites the supplied buffer to a writer in the specified …\nWrites all the bytes in an image to the encoder.\nWrites the buffer to a writer in the specified format.\nEncode this image and write it to <code>w</code>.\nProvides color conversions for whole image buffers.\nEnumerate the pixels of an image.\nEnumerate the pixels of an image.\nEnumerate the rows of an image.\nEnumerate the rows of an image.\nIterate over pixel refs.\nIterate over mutable pixel refs.\nIterate over rows of an image\nIterate over mutable rows of an image\nConverts <code>self</code> to a buffer of type T\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecoding and Encoding of BMP Images\nDecoding of DDS images\nDecoding of DXT (S3TC) compression\nDecoding of farbfeld images\nDecoding of GIF Images\nDecoding of Radiance HDR Images\nDecoding and Encoding of ICO files\nDecoding and Encoding of JPEG Images\nDecoding of OpenEXR (.exr) Images\nDecoding and Encoding of PNG Images\nDecoding of netpbm image formats (pbm, pgm, ppm and pam).\nDecoding of TGA Images\nDecoding and Encoding of TIFF Images\nDecoding of WebP Images\nA bmp decoder\nThe representation of a BMP encoder.\nEncodes the image <code>image</code> that has dimensions <code>width</code> and …\nSame as <code>encode</code>, but allow a palette to be passed in. The …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the palette that is embedded in the BMP image, if any.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new decoder that decodes from the stream <code>r</code>\nCreate a new encoder that writes its output to <code>w</code>.\nIf true, the palette in BMP does not apply to the image …\nThe representation of a DDS decoder\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new decoder that decodes from the stream <code>r</code>\nThe DXT1 format. 48 bytes of RGB data in a 4x4 pixel …\nThe DXT3 format. 64 bytes of RGBA data in a 4x4 pixel …\nThe DXT5 format. 64 bytes of RGBA data in a 4x4 pixel …\nDXT decoder\nDXT encoder\nDXT reader\nWhat version of DXT compression are we using? Note that …\nReturns the color type that is stored in this DXT variant\nEncodes the image data <code>data</code> that has dimensions <code>width</code> and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new DXT decoder that decodes from the stream <code>r</code>. …\nCreate a new encoder that writes its output to <code>w</code>\nfarbfeld decoder\nfarbfeld encoder\nfarbfeld Reader\nEncodes the image <code>data</code> (native endian) that has dimensions …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new decoder that decodes from the stream <code>r</code>\nCreate a new encoder that writes its output to <code>w</code>. The …\nFinite number of repetitions\nGIF decoder\nGIF encoder.\nWrapper struct around a <code>Cursor&lt;Vec&lt;u8&gt;&gt;</code>\nLooping GIF\nNumber of repetitions for a GIF animation\nEncode a single image.\nEncode one frame of animation.\nEncodes Frames. Consider using <code>try_encode_frames</code> instead …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new decoder that decodes the input steam <code>r</code>\nCreates a new GIF encoder.\nCreate a new GIF encoder, and has the speed parameter <code>speed</code>…\nSet the repeat behaviour of the encoded GIF\nTry to encode a collection of <code>ImageResult&lt;animation::Frame&gt;</code>…\nCreates a new decoder that decodes the input steam <code>r</code>, …\nAdapter to conform to <code>ImageDecoder</code> trait\nAn Radiance HDR decoder\nRadiance HDR encoder\nScanline buffered pixel by pixel iterator\nMetadata for Radiance HDR image\nWrapper struct around a <code>Cursor&lt;Vec&lt;u8&gt;&gt;</code>\nRefer to wikipedia\nRadiance HDR file signature\nColor components\nDivide color values by corresponding tuple member (r, g, …\nAll lines contained in image header are put here. Ordering …\nExponent\nEncodes the image <code>data</code> that has dimensions <code>width</code> and <code>height</code>\nDivide color values by exposure to get to get physical …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHeight of decoded image. It depends on orientation too.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns file metadata. Refer to <code>HdrMetadata</code> for details.\nCreates encoder\nCreates adapter\nReads Radiance HDR image header from stream <code>r</code> if the …\nAllows reading old Radiance HDR images\nOrientation matrix. For standard orientation it is …\nPixel height divided by pixel width\nConsumes decoder and returns a vector of Rgb pixels.\nConsumes decoder and returns a vector of Rgb pixels. scale …\nConsumes decoder and returns a vector of RGBE8 pixels\nConsumes decoder and returns a vector of transformed pixels\nHelper function for reading raw 3-channel f32 images\nCreates <code>Rgbe8Pixel</code> from components\nConverts <code>Rgbe8Pixel</code> into <code>Rgb&lt;f32&gt;</code> linearly\nConverts <code>Rgbe8Pixel</code> into <code>Rgb&lt;T&gt;</code> with scale=1 and gamma=2.2\nConverts Rgbe8Pixel into Rgb using provided scale and gamma\nConverts <code>Rgb&lt;f32&gt;</code> into <code>Rgbe8Pixel</code>\nWidth of decoded image. It could be either scanline length,\nReads Radiance HDR image header from stream <code>reader</code>, if the …\nAn ico decoder\nICO encoder\nAn ICO image entry\nConstruct a new <code>IcoFrame</code> by encoding <code>buf</code> as a PNG\nEncodes the image <code>image</code> that has dimensions <code>width</code> and …\nTakes some <code>IcoFrame</code>s and encodes them into an ICO.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new decoder that decodes from the stream <code>r</code>\nCreate a new encoder that writes its output to <code>w</code>.\nConstruct a new <code>IcoFrame</code> using a pre-encoded PNG or BMP\nWrite an ICO image with the specified width, height, and …\nPixels per centimeter\nPixels per inch (2.54 cm)\nJPEG decoder\nThe representation of a JPEG encoder\nRepresents the absence of a unit, the values indicate only …\nRepresents the pixel density of an image\nRepresents a unit in which the density of an image is …\nReturns a pixel density with a pixel aspect ratio of 1\nA couple of values for (Xdensity, Ydensity)\nCreates the most common pixel density type: the horizontal …\nEncodes the image stored in the raw byte buffer <code>image</code> that …\nEncodes the given image.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new decoder that decodes from the stream <code>r</code>\nCreate a new encoder that writes its output to <code>w</code>\nCreate a new encoder that writes its output to <code>w</code>, and has …\nConfigure the decoder to scale the image during decoding.\nSet the pixel density of the images the encoder will …\nThe unit in which the density is measured\nAn OpenEXR decoder. Immediately reads the meta data from …\nA thin wrapper that implements <code>ImageEncoder</code> for OpenEXR …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUse <code>read_image</code> instead if possible, as this method creates …\nCreate a decoder. Consumes the first few bytes of the …\nCreate an <code>ImageEncoder</code>. Does not write anything yet. …\nCreate a decoder. Consumes the first few bytes of the …\nWrites the complete image.\nUses a heuristic to select one of the preceding filters …\nAn <code>AnimationDecoder</code> adapter of <code>PngDecoder</code>.\nFilters based on the average of left and right neighbor …\nHigh compression level\nCompression level of a PNG encoder. The default setting is …\nDefault compression level\nFast, minimal compression\nFilter algorithms used to process image data to improve …\nHuffman coding compression\nNo processing done, best used for low bit depth grayscale …\nAlgorithm that takes into account the left, upper left, …\nPNG decoder\nPNG encoder\nPng Reader\nRun-length encoding compression\nFilters based on previous pixel in the same scanline\nFilters based on the scanline above\nTurn this into an iterator over the animation frames.\nEncodes the image <code>data</code> that has dimensions <code>width</code> and <code>height</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns if the image contains an animation.\nCreates a new decoder that decodes from the stream <code>r</code>\nCreate a new encoder that writes its output to <code>w</code>\nCreate a new encoder that writes its output to <code>w</code> with …\nWrite a PNG image with the specified width, height, and …\nHeader produced by a <code>pam</code> file (“Portable Arbitrary Map”…\nMagic number P7\nStandardized tuple type specifiers in the header of a <code>pam</code>.\nSamples are encoded as decimal ascii strings separated by …\nSamples are unsigned binary integers in big endian\nMagic numbers P1 and P4\nHeader produced by a <code>pbm</code> file (“Portable Bit Map”)\nPixels are either black (0) or white (1)\nPixels are either black (0) or white (1) and a second …\nAn image format which is not standardized\nMagic numbers P2 and P5\nHeader produced by a <code>pgm</code> file (“Portable Gray Map”)\nPixels represent the amount of white\nGrayscale with an additional alpha channel\nMagic numbers P3 and P6\nHeader produced by a <code>ppm</code> file (“Portable Pixel Map”)\nPNM decoder\nEncodes images to any of the <code>pnm</code> image formats.\nStores the complete header data of a file.\nDenotes the category of the magic number\nThree channels: Red, Green, Blue\nFour channels: Red, Green, Blue, Alpha\nThe kind of encoding used to store sample values\nRetrieve the underlying arbitrary header if any\nRetrieve the underlying bitmap header if any\nRetrieve the underlying graymap header if any\nRetrieve the underlying pixmap header if any\nNumber of color channels\nEncode an image whose samples are represented as <code>u8</code>.\nBinary or Ascii encoded file\nBinary or Ascii encoded file\nBinary or Ascii encoded file\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe height of the image this header is for.\nHeight of the image file\nHeight of the image file\nHeight of the image file\nHeight of the image file\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtract the reader and header after an image has been read.\nGet the two magic constant bytes corresponding to this …\nThe biggest value a sample can have. In other words, the …\nMaximum sample value within the image\nMaximum sample value within the image\nMaximum sample value within the image\nCreate a new decoder that decodes from the stream <code>read</code>\nCreate new PnmEncoder from the <code>writer</code>.\nWhether samples are stored as binary or as decimal ascii\nGet the pnm subtype, depending on the magic constant …\nRetrieve the format subtype from which the header was …\nColor interpretation of image pixels\nThe width of the image this header is for.\nWidth of the image file\nWidth of the image file\nWidth of the image file\nWidth of the image file\nCreate the header dynamically for each image.\nEnforce the use of a chosen header.\nEncode a specific pnm subtype image.\nWrite the header back into a binary stream\nA decoder for TGA images\nTGA encoder.\nEncodes the image <code>buf</code> that has dimensions <code>width</code> and <code>height</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new decoder that decodes from the stream <code>r</code>\nCreate a new encoder that writes its output to <code>w</code>.\nDecoder for TIFF images.\nEncoder for tiff images\nWrapper struct around a <code>Cursor&lt;Vec&lt;u8&gt;&gt;</code>\nEncodes the image <code>image</code> that has dimensions <code>width</code> and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new TiffDecoder.\nCreate a new encoder that writes its output to <code>w</code>\nWebP Image format decoder. Currently only supports lossy …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new WebPDecoder from the Reader <code>r</code>. This function …\nAn implementation of the VP8 Video Codec\nA Representation of the last decoded video frame\nVP8 Decoder\nDecodes the current frame\nIndicates whether this frame is intended for display\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the buffer size\nThe height of the luma plane\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates whether this frame is a keyframe\nCreate a new decoder. The reader must present a raw vp8 …\nThe pixel type of the frame as defined by Section 9.2 of …\nThe blue plane of the frame\nThe red plane of the frame\nThe width of the luma plane\nThe luma plane of the frame\nThe required color type can not be handled.\nAn error was encountered while decoding.\nAn error was encountered while decoding an image.\nThe resulting image exceed dimension limits in either …\nThe dimensions passed are wrong.\nAn error was encountered while encoding.\nAn error was encountered while encoding an image.\nContains the error value\nThe format is known exactly.\nRepeated an operation for which error that could not be …\nAn image format is not supported.\nA string describing the parameter. This is discouraged and …\nSome feature specified by string. This is discouraged and …\nThe generic error type for image operations.\nA best effort representation for image formats.\nResult of an image decoding/encoding process\nThe operation would have performed an allocation larger …\nAn error occurred while interacting with the environment.\nCompleting the operation would have required more …\nIndicates the limit that prevented an operation from …\nCompleting the operation would have required more …\nThe format can be identified by a name.\nThe end of the image has been reached.\nContains the success value\nAn error was encountered in input arguments.\nAn error was encountered in inputs arguments.\nDetails how a parameter is malformed.\nA common path extension for the format is known.\nThe format is not known or could not be determined.\nAn operation can not be completed by the chosen …\nThe specified strict limits are not supported for this …\nThe implementation for an operation was not provided.\nDetails what feature is not supported.\nReturns the image format associated with this error.\nReturn the image format associated with this error.\nReturns the image format associated with this error.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an <code>UnsupportedError</code> for an image with details on …\nCreate an <code>EncodingError</code> for an image format.\nCreate a <code>DecodingError</code> for an image format.\nConstruct a <code>ParameterError</code> directly from a corresponding …\nConstruct a generic <code>LimitError</code> directly from a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the corresponding <code>UnsupportedErrorKind</code> of the …\nReturns the corresponding <code>ParameterErrorKind</code> of the error.\nReturns the corresponding <code>LimitErrorKind</code> of the error.\nCreate an <code>EncodingError</code> that stems from an arbitrary error …\nCreate a <code>DecodingError</code> that stems from an arbitrary error …\nThe given limits\nThe supported strict limits\nThe samples are in column-major form and all samples are …\nDenotes invalid flat sample buffers when trying to convert …\nA flat buffer over a (multi channel) image.\nAll samples are packed.\nDifferent normal forms of buffers.\nThe represented image can not use this representation.\nAt least pixels are packed.\nThe samples are in row-major form and all samples are …\nA ffi compatible description of a sample buffer.\nThe represented image was too large.\nNo pixel aliases another.\nA flat buffer that can be used as an image view.\nA mutable owning version of a flat buffer.\nThe color format did not match the channel count.\nGet a mutable reference based version.\nView the samples as a slice.\nGet a reference based version.\nView the samples as a slice.\nView this buffer as an image over some type of pixel.\nInterpret this buffer as a mutable image.\nView this buffer but keep mutability at a sample level.\nTuple of bounds in the order of coordinate inputs.\nTuple of bounds in the order of coordinate inputs.\nAdd this to an index to get to the sample in the next …\nThe number of channels in the color representation of the …\nSupplementary color information.\nDescribe a column-major image packed in all directions.\nGet the dimensions <code>(channels, width, height)</code>.\nGet the dimensions <code>(channels, width, height)</code>.\nCheck if a buffer of length <code>len</code> is large enough.\nCheck if a buffer of length <code>len</code> is large enough.\nGet a reference on the inner sample descriptor.\nGet a reference on the sample buffer descriptor.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to a single sample.\nGet a mutable reference to a selected subpixel if it is …\nGet a mutable reference to a selected sample.\nGet a reference to a single sample.\nGet a reference to a selected subpixel if it is in-bounds.\nGet a reference to a selected subpixel.\nIf there are any samples aliasing each other.\nIf there are any samples aliasing each other.\nThe height of the represented image.\nAdd this to an index to get to the next sample in …\nMutable portion of the buffer that holds sample values.\nReturn the mutable portion of the buffer that holds sample …\nReturn the mutable buffer that holds sample values.\nReturn the portion of the buffer that holds sample values.\nReturn the portion of the buffer that holds sample values.\nReturn the portion of the buffer that holds sample values.\nCheck that the pixel and the channel index are in bounds.\nCheck that the pixel and the channel index are in bounds.\nGet an index provided it is inbouds.\nGet an index provided it is inbouds.\nResolve the index of a particular sample.\nReturn a reference to a single sample at specified …\nResolve the index of a particular sample.\nGet the theoretical position of sample (x, y, channel).\nGet the theoretical position of sample (channel, x, y).\nReturn a mutable reference to a single sample at specified …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTake out the sample buffer.\nTake out the sample buffer.\nCheck if a buffer fulfills the requirements of a normal …\nCheck if a buffer fulfills the requirements of a normal …\nA <code>repr(C)</code> description of the layout of buffer samples.\nGet the minimum length of a buffer such that all in-bounds …\nGet the minimum length of a buffer such that all in-bounds …\nGet the minimum length of a buffer such that all in-bounds …\nGet the minimum length of a buffer such that all in-bounds …\nCompares the logical preconditions.\nDescribe a row-major image packed in all directions.\nGet a reference on the inner buffer.\nGet a reference on the inner buffer.\nUnderlying linear container holding sample values.\nShrink the image to the minimum of current and given …\nShrink the image to the minimum of current and given …\nShrink the inner image.\nShrink the inner image.\nGet the strides for indexing matrix-like <code>[(c, w, h)]</code>.\nGet the strides for indexing matrix-like <code>[(c, w, h)]</code>.\nCopy the data into an owned vector.\nMove the data into an image buffer.\nTry to convert this into an image with mutable pixels.\nThe width of the represented image.\nAdd this to an index to get to the next sample in …\nCreate a monocolor image from a single pixel.\nColor operations\nCubic Filter\nColor operations\nAvailable Sampling Filters.\nGaussian Filter\nLanczos with window 3\nNearest Neighbor\nLinear Filter\nImage sampling Performs a Gaussian blur on the supplied …\nColor operations\nFunctions for altering and converting the color of …\nColor operations\nReturn a mutable view into an image The coordinates set …\nReturn an immutable view into an image The coordinates set …\nColor operations\nImage sampling Perform a 3x3 box filter on the supplied …\nAffine transformations Flip an image horizontally\nAffine transformations Flip an image horizontally and put …\nAffine transformations Flip an image horizontally in place.\nAffine transformations Flip an image vertically\nAffine transformations Flip an image vertically and put …\nAffine transformations Flip an image vertically in place.\nReturns the argument unchanged.\nColor operations\nColor operations\nColor operations\nColor operations\nFill the image with a linear horizontal gradient\nColor operations\nColor operations\nCalls <code>U::from(self)</code>.\nColor operations\nOverlay an image at a given coordinate (x, y)\nCalculate the region that can be copied from top to bottom.\nReplace the contents of an image at a given coordinate (x, …\nImage sampling Resize the supplied image to the specified …\nAffine transformations Rotate an image 180 degrees …\nAffine transformations Rotate an image 180 degrees …\nAffine transformations Rotate an image 180 degrees …\nAffine transformations Rotate an image 270 degrees …\nAffine transformations Rotate an image 270 degrees …\nAffine transformations Rotate an image 90 degrees …\nAffine transformations Rotate an image 90 degrees …\nImage sampling Resize the supplied image to the specific …\nTile an image by repeating it multiple times\nImage sampling Performs an unsharpen mask on the supplied …\nFill the image with a linear vertical gradient\nA bi-level color map\nThe color type on which the map operates on\nA color map\nBrighten the supplied image. <code>value</code> is the amount to …\nBrighten the supplied image in place. <code>value</code> is the amount …\nAdjust the contrast of the supplied image. <code>contrast</code> is the …\nAdjust the contrast of the supplied image in place. …\nReduces the colors of the image using the supplied …\nReturns the argument unchanged.\nConvert the supplied image to grayscale. Alpha channel is …\nConvert the supplied image to grayscale. Alpha channel is …\nConvert the supplied image to a grayscale image with the …\nConvert the supplied image to a grayscale image with the …\nDetermine if this implementation of ColorMap overrides the …\nIndicate NeuQuant implements <code>lookup</code>.\nHue rotate the supplied image. <code>value</code> is the degrees to …\nHue rotate the supplied image in place. <code>value</code> is the …\nReduces the colors using the supplied <code>color_map</code> and …\nReturns the index of the closest match of <code>color</code> in the …\nCalls <code>U::from(self)</code>.\nInvert each pixel within the supplied image. This function …\nLooks up color by index in the color map.  If <code>idx</code> is out …\nMaps <code>color</code> to the closest color in the color map.\nSet of supported strict limits for a decoder.\nResource limits for decoding.\nA multi-format image reader.\nThis function checks the <code>max_image_width</code> and …\nThis function checks that all currently set strict limits …\nRemove the current information on the image format.\nRead the image (replaces <code>load</code>).\nGet the currently determined format.\nThis function increases the <code>max_alloc</code> limit with amount. …\nThis function acts identically to [<code>free</code>], but takes a <code>usize</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRead the image dimensions.\nUnwrap the reader.\nSet a custom set of decoding limits.\nThe maximum allowed sum of allocations allocated by the …\nThe maximum allowed image height. This limit is strict. …\nThe maximum allowed image width. This limit is strict. The …\nCreate a new image reader without a preset format.\nDisable all decoding limits.\nDisable all limits.\nOpen a file to read, format will be guessed from path.\nThis function checks that the current limit allows for …\nThis function acts identically to [<code>reserve</code>], but takes a …\nSupply the format as which to interpret the read image.\nConstruct a reader with specified format.\nMake a format guess based on the content, replacing it on …\nA Rectangle defined by its top left corner, width and …\nReturns the argument unchanged.\nThe rectangle’s height.\nCalls <code>U::from(self)</code>.\nThe rectangle’s width.\nThe x coordinate of the top left corner.\nThe y coordinate of the top left corner.")