searchState.loadedDescShard("chrono", 0, "Chrono: Date and Time for Rust\nApril\nAugust\nAutomatically select one of <code>Secs</code>, <code>Millis</code>, <code>Micros</code>, or <code>Nanos</code> …\nISO 8601 calendar date with time zone.\nISO 8601 combined date and time with time zone.\nThe common set of methods for date component.\nDecember\nISO 8601 time duration with nanosecond precision. This …\nError when <code>Duration.num_nanoseconds</code> exceeds the limit.\nError when the Duration exceeds the Duration from or until …\nExtension trait for rounding or truncating a DateTime by a …\nError that can occur in rounding or truncating\nFebruary\nFriday.\nJanuary\nJuly\nJune\nThe maximum possible <code>Date</code>.\nThe maximum possible <code>DateTime&lt;Utc&gt;</code>.\nThe maximum possible <code>Date</code>.\nThe maximum possible <code>DateTime&lt;Utc&gt;</code>.\nThe minimum possible <code>Date</code>.\nThe minimum possible <code>DateTime&lt;Utc&gt;</code>.\nThe minimum possible <code>Date</code>.\nThe minimum possible <code>DateTime&lt;Utc&gt;</code>.\nMarch\nMay\nUse fixed 6 subsecond digits. This corresponds to …\nUse fixed 3 subsecond digits. This corresponds to …\nMonday.\nThe month of the year.\nA duration in calendar months\nUse fixed 9 subsecond digits. This corresponds to …\nNovember\nOctober\nAn error resulting from reading <code>&lt;Month&gt;</code> value with <code>FromStr</code>.\nAn error resulting from reading <code>Weekday</code> value with <code>FromStr</code>.\nAn error from rounding by <code>Duration</code>\nSaturday.\nSpecific formatting options for seconds. This may be …\nFormat whole seconds only, with no decimal point nor …\nSeptember\nExtension trait for subsecond rounding or truncation to a …\nSunday.\nThursday.\nThe common set of methods for time component.\nError when <code>DateTime.timestamp_nanos</code> exceeds the limit.\nTuesday.\nWednesday.\nThe day of week.\nMakes a new <code>DateTime</code> from the current date, hour, minute …\nMakes a new <code>DateTime</code> from the current date, hour, minute, …\nMakes a new <code>DateTime</code> from the current date, hour, minute, …\nMakes a new <code>DateTime</code> from the current date, hour, minute, …\nMakes a new <code>DateTime</code> from the current date, hour, minute, …\nMakes a new <code>DateTime</code> from the current date, hour, minute, …\nMakes a new <code>DateTime</code> from the current date, hour, minute, …\nMakes a new <code>DateTime</code> from the current date, hour, minute …\nMakes a new <code>DateTime</code> from the current date and given …\nAdd two durations, returning <code>None</code> if overflow occurred.\nAdds given <code>Duration</code> to the current date.\nAdds given <code>Duration</code> to the current date and time.\nSubtract two durations, returning <code>None</code> if overflow …\nSubtracts given <code>Duration</code> from the current date.\nSubtracts given <code>Duration</code> from the current date and time.\nRetrieves a date component\nRetrieves the Date without an associated timezone\nReturns the day of month starting from 1.\nReturns the day of month starting from 0.\nMakes a new <code>Duration</code> with given number of days. Equivalent …\nReturn a copy rounded by Duration.\nReturn a copy truncated by Duration.\nFormatting (and parsing) utilities for date and time.\nFormats the date with the specified format string. See the …\nFormats the combined date and time with the specified …\nFormats the date with the specified formatting items.\nFormats the combined date and time with the specified …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert this <code>DateTime&lt;Utc&gt;</code> instance into a …\nConvert this <code>DateTime&lt;FixedOffset&gt;</code> instance into a …\nConvert this <code>DateTime&lt;FixedOffset&gt;</code> instance into a …\nReturns the argument unchanged.\nConvert this <code>DateTime&lt;Local&gt;</code> instance into a <code>DateTime&lt;Utc&gt;</code> …\nConvert this <code>DateTime&lt;Local&gt;</code> instance into a …\nConvert this <code>DateTime&lt;Utc&gt;</code> instance into a <code>DateTime&lt;Local&gt;</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMakes a new <code>DateTime</code> with given <strong>local</strong> datetime and offset …\nCreates a <code>time::Duration</code> object from <code>std::time::Duration</code>\nReturns an Option from a i64, assuming a 1-index, January …\nMakes a new <code>Date</code> with given <em>UTC</em> date and offset. The local …\nMakes a new <code>DateTime</code> with given <em>UTC</em> datetime and offset. …\nReturns the hour number from 0 to 23.\nReturns the hour number from 1 to 12 with a boolean flag, …\nReturns the hour number from 1 to 12 with a boolean flag, …\nMakes a new <code>Duration</code> with given number of hours. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the duration equals <code>Duration::zero()</code>.\nReturns the ISO week.\nThe maximum possible <code>Duration</code>: <code>i64::MAX</code> milliseconds.\nMakes a new <code>Duration</code> with given number of microseconds.\nMakes a new <code>Duration</code> with given number of milliseconds.\nThe minimum possible <code>Duration</code>: <code>i64::MIN</code> milliseconds.\nReturns the minute number from 0 to 59.\nMakes a new <code>Duration</code> with given number of minutes. …\nReturns the month number starting from 1.\nReturns the month number starting from 0.\nDate and time types unconcerned with timezones.\nReturns a view to the naive local date.\nReturns a view to the naive local datetime.\nReturns a view to the naive UTC date.\nReturns a view to the naive UTC datetime.\nGet the name of the month\nReturns the number of nanoseconds since the whole non-leap …\nMakes a new <code>Duration</code> with given number of nanoseconds.\nConstruct a new <code>Months</code> from a number of months\nReturns the total number of whole days in the duration.\nCounts the days in the proleptic Gregorian calendar, with …\nCounts the days in the proleptic Gregorian calendar, with …\nReturns a day-of-week number starting from Monday = 0.\nReturns a day-of-week number starting from Sunday = 0.\nReturns the total number of whole hours in the duration.\nReturns the total number of whole microseconds in the …\nReturns the total number of whole milliseconds in the …\nReturns the total number of whole minutes in the duration.\nReturns the total number of whole nanoseconds in the …\nReturns the total number of whole seconds in the duration.\nReturns the number of non-leap seconds past the last …\nReturns the number of non-leap seconds past the last …\nReturns the total number of whole weeks in the duration.\nReturns a day-of-week number starting from Monday = 1. …\nReturns a month-of-year number starting from January = 1.\nReturns a day-of-week number starting from Sunday = 1.\nThe time zone, which calculates offsets from the local …\nRetrieves an associated offset from UTC.\nRetrieves an associated offset from UTC.\nReturns the day of year starting from 1.\nReturns the day of year starting from 0.\nParses an RFC 2822 date and time string such as …\nParses an RFC 3339 and ISO 8601 date and time string such …\nParses a string with the specified format string and …\nCompare two DateTimes based on their true time, ignoring …\nMakes a new <code>Date</code> for the prior date.\nThe previous day in the week.\nThe previous month.\nMakes a new <code>Date</code> for the prior date.\nA convenience module appropriate for glob imports (…\nReturn a copy rounded to the specified number of subsecond …\nReturns the second number from 0 to 59.\nMakes a new <code>Duration</code> with given number of seconds. Panics …\nSerialization/Deserialization in alternate formats\nSubtracts another <code>Date</code> from the current date. Returns a …\nSubtracts another <code>DateTime</code> from the current date and time. …\nRuns a closure, returning the duration of time it took to …\nMakes a new <code>Date</code> for the next date.\nThe next day in the week.\nThe next month.\nMakes a new <code>Date</code> for the next date.\nRetrieves a time component. Unlike <code>date</code>, this is not …\nReturns the number of non-leap seconds since January 1, …\nReturns the number of non-leap-microseconds since January …\nReturns the number of non-leap-milliseconds since January …\nReturns the number of non-leap-nanoseconds since January …\nReturns the number of microseconds since the last second …\nReturns the number of milliseconds since the last second …\nReturns the number of nanoseconds since the last second …\nRetrieves an associated time zone.\nRetrieves an associated time zone.\nReturns an RFC 2822 date and time string such as …\nReturns an RFC 3339 and ISO 8601 date and time string such …\nReturn an RFC 3339 and ISO 8601 date and time string with …\nCreates a <code>std::time::Duration</code> object from <code>time::Duration</code>\nReturn a copy truncated to the specified number of …\nReturns the day of week.\nMakes a new <code>Duration</code> with given number of weeks. …\nMakes a new value with the day of month (starting from 1) …\nMakes a new value with the day of month (starting from 0) …\nMakes a new value with the hour number changed.\nMakes a new value with the minute number changed.\nMakes a new value with the month number (starting from 1) …\nMakes a new value with the month number (starting from 0) …\nMakes a new value with nanoseconds since the whole …\nMakes a new value with the day of year (starting from 1) …\nMakes a new value with the day of year (starting from 0) …\nMakes a new value with the second number changed.\nChanges the associated time zone. This does not change the …\nChanges the associated time zone. The returned <code>DateTime</code> …\nMakes a new value with the year number changed.\nReturns the year number in the calendar date.\nReturns the absolute year number starting from 1 with a …\nReturns the absolute year number starting from 1 with a …\nReturns the number of whole years from the given <code>base</code> …\nRetrieve the elapsed years from now to the given <code>DateTime</code>.\nA duration where the stored seconds and nanoseconds are …\nThere was an error on the formatting string, or there were …\nDay of the month (FW=PW=2).\nA <em>temporary</em> object which can be used as an argument to …\nContains the error value\nIssues a formatting error. Used to signal an invalid …\nFixed-format item types.\nFixed-format item.\nHour number in the 24-hour clocks (FW=PW=2).\nHour number in the 12-hour clocks (FW=PW=2).\nThere is no possible date and time value with given set of …\nInternal uses only.\nInternal uses only.\nAn opaque type representing fixed-format item types for …\nAn opaque type representing numeric item types for …\nThe input string has some invalid character sequence for …\nWeek number in the ISO week date (FW=PW=2).\nYear in the ISO week date (FW=4, PW=∞). May accept years …\nYear in the ISO week date, divided by 100 (FW=PW=2). …\nYear in the ISO week date, modulo 100 (FW=PW=2). Cannot be …\nA single formatting item. This is used for both formatting …\nA literally printed and parsed text.\nFull month names.\nFull day of the week names.\nAM/PM.\nThe number of minutes since the last whole hour (FW=PW=2).\nMonth (FW=PW=2).\nThe number of nanoseconds since the last whole second …\nAn optional dot plus one or more digits for left-aligned …\nSame as <code>Nanosecond</code> but the accuracy is fixed to 3.\nSame as <code>Nanosecond</code> but the accuracy is fixed to 6.\nSame as <code>Nanosecond</code> but the accuracy is fixed to 9.\nNo padding.\nGiven set of fields is not enough to make a requested date …\nDay of the week, where Sunday = 0 and Saturday = 6 …\nNumeric item types. They have associated formatting width …\nNumeric item. Can be optionally padded to the maximal …\nContains the success value\nDay of the year (FW=PW=3).\nGiven field is out of permitted range.\nSame as <code>Literal</code> but with the string owned by the item.\nSame as <code>Space</code> but with the string owned by the item.\nPadding characters for numeric items.\nAn error from the <code>parse</code> function.\nThe category of parse error\nSame as <code>Result&lt;T, ParseError&gt;</code>.\nParsed parts of date and time. There are two classes of …\nRFC 2822 date and time syntax. Commonly used for email and …\nRFC 3339 &amp; ISO 8601 date and time syntax.\nThe number of seconds since the last whole minute …\nAbbreviated month names.\nAbbreviated day of the week names.\nSpace padding.\nWhitespace. Prints literally but reads zero or more …\nThe number of non-leap seconds since the midnight UTC on …\nTimezone name.\nSame as <code>TimezoneOffsetColon</code> but prints no colon. Parsing …\nOffset from the local time to UTC (<code>+09:00</code> or <code>-04:00</code> or …\nOffset from the local time to UTC (<code>+09:00</code> or <code>-04:00</code> or <code>Z</code>).\nSame as <code>TimezoneOffsetColonZ</code> but prints no colon. Parsing …\nAll formatting items have been read but there is a …\nThe input string has been prematurely ended.\nAM/PM.\nWeek number, where the week 1 starts at the first Monday …\nWeek number, where the week 1 starts at the first Sunday …\nDay of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).\nFull Gregorian year (FW=4, PW=∞). May accept years …\nGregorian year divided by 100 (century number; FW=PW=2). …\nGregorian year modulo 100 (FW=PW=2). Cannot be negative.\nZero (<code>0</code>) padding.\nDay of the month (1–28, 1–29, 1–30 or 1–31 …\nTries to format given arguments with given formatting …\nFormats single formatting item\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHour number divided by 12 (0–1). 0 indicates AM and 1 …\nHour number modulo 12 (0–11).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nISO week number (1–52 or 1–53 depending on the year).\nYear in the ISO week date.\nYear in the ISO week date, divided by 100. Implies that …\nYear in the ISO week date, modulo 100. Implies that the …\nThe category of parse error\nMinute number (0–59).\nMonth (1–12).\nThe number of nanoseconds since the whole second (0–…\nReturns the initial value of parsed parts.\nMakes a new <code>DelayedFormat</code> value out of local date and time.\nMakes a new <code>DelayedFormat</code> value out of local date and time …\nOffset from the local time to UTC, in seconds.\nDay of the year (1–365 or 1–366 depending on the year).\nTries to parse given string into <code>parsed</code> with given …\nSecond number (0–60, accounting for leap seconds).\nTries to set the <code>hour_div_12</code> field from given value. (<code>false</code>…\nTries to set the <code>day</code> field from given value.\nTries to set both <code>hour_div_12</code> and <code>hour_mod_12</code> fields from …\nTries to set the <code>hour_mod_12</code> field from given hour number …\nTries to set the <code>isoweek</code> field from given value.\nTries to set the <code>isoyear</code> field from given value.\nTries to set the <code>isoyear_div_100</code> field from given value.\nTries to set the <code>isoyear_mod_100</code> field from given value.\nTries to set the <code>minute</code> field from given value.\nTries to set the <code>month</code> field from given value.\nTries to set the <code>nanosecond</code> field from given value.\nTries to set the <code>offset</code> field from given value.\nTries to set the <code>ordinal</code> field from given value.\nTries to set the <code>second</code> field from given value.\nTries to set the <code>timestamp</code> field from given value.\nTries to set the <code>week_from_mon</code> field from given value.\nTries to set the <code>week_from_sun</code> field from given value.\nTries to set the <code>weekday</code> field from given value.\nTries to set the <code>year</code> field from given value.\nTries to set the <code>year_div_100</code> field from given value.\nTries to set the <code>year_mod_100</code> field from given value.\n<code>strftime</code>/<code>strptime</code>-inspired date and time formatting syntax.\nThe number of non-leap seconds since the midnight UTC on …\nReturns a parsed timezone-aware date and time out of given …\nReturns a parsed timezone-aware date and time out of given …\nReturns a parsed fixed time zone offset out of given …\nReturns a parsed naive date out of given fields.\nReturns a parsed naive date and time out of given fields, …\nReturns a parsed naive time out of given fields.\nWeek number, where the week 1 starts at the first Monday …\nWeek number, where the week 1 starts at the first Sunday …\nDay of the week.\nYear.\nYear divided by 100. Implies that the year is &gt;= 1 BCE …\nYear modulo 100. Implies that the year is &gt;= 1 BCE when …\nParsing iterator for <code>strftime</code>-like format strings.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new parsing iterator from the <code>strftime</code>-like …\nISO 8601 week.\nThe maximum possible <code>NaiveDate</code> (December 31, 262143 CE).\nThe maximum possible <code>NaiveDateTime</code>.\nThe maximum possible <code>NaiveDate</code> (December 31, 262143 CE).\nThe maximum possible <code>NaiveDateTime</code>.\nThe minimum possible <code>NaiveDate</code> (January 1, 262145 BCE).\nThe minimum possible <code>NaiveDateTime</code>.\nThe minimum possible <code>NaiveDate</code> (January 1, 262145 BCE).\nThe minimum possible <code>NaiveDateTime</code>.\nISO 8601 calendar date without timezone. Allows for every …\nISO 8601 combined date and time without timezone.\nISO 8601 time without timezone. Allows for the nanosecond …\nA week represented by a <code>NaiveDate</code> and a <code>Weekday</code> which is …\nAn addition of months to <code>NaiveDate</code> clamped to valid days …\nMakes a new <code>NaiveDateTime</code> from the current date, hour, …\nMakes a new <code>NaiveDateTime</code> from the current date, hour, …\nMakes a new <code>NaiveDateTime</code> from the current date, hour, …\nMakes a new <code>NaiveDateTime</code> from the current date, hour, …\nMakes a new <code>NaiveDateTime</code> from the current date, hour, …\nMakes a new <code>NaiveDateTime</code> from the current date, hour, …\nMakes a new <code>NaiveDateTime</code> from the current date, hour, …\nMakes a new <code>NaiveDateTime</code> from the current date, hour, …\nConverts the <code>NaiveDateTime</code> into the timezone-aware …\nMakes a new <code>NaiveDateTime</code> from the current date and given …\nAdd a duration in <code>Months</code> to the date\nAdds the <code>days</code> part of given <code>Duration</code> to the current date.\nAdds given <code>Duration</code> to the current date and time.\nSubtract a duration in <code>Months</code> from the date\nSubtracts the <code>days</code> part of given <code>Duration</code> from the current …\nSubtracts given <code>Duration</code> from the current date and time.\nRetrieves a date component.\nReturns the day of month starting from 1.\nReturns the day of month starting from 1.\nReturns the day of month starting from 0.\nReturns the day of month starting from 0.\nReturns a <code>RangeInclusive&lt;T&gt;</code> representing the whole week …\nReturns a date representing the first day of the week.\nFormats the date with the specified format string. See the …\nFormats the combined date and time with the specified …\nFormats the time with the specified format string. See the …\nFormats the date with the specified formatting items. …\nFormats the combined date and time with the specified …\nFormats the time with the specified formatting items. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMakes a new <code>NaiveTime</code> from hour, minute and second.\nMakes a new <code>NaiveTime</code> from hour, minute, second and …\nMakes a new <code>NaiveTime</code> from hour, minute, second and …\nMakes a new <code>NaiveTime</code> from hour, minute, second and …\nMakes a new <code>NaiveTime</code> from hour, minute, second and …\nMakes a new <code>NaiveTime</code> from hour, minute, second and …\nMakes a new <code>NaiveTime</code> from hour, minute, second and …\nMakes a new <code>NaiveTime</code> from hour, minute and second.\nMakes a new <code>NaiveDate</code> from the ISO week date (year, week …\nMakes a new <code>NaiveDate</code> from the ISO week date (year, week …\nMakes a new <code>NaiveDate</code> from a day’s number in the …\nMakes a new <code>NaiveDate</code> from a day’s number in the …\nMakes a new <code>NaiveTime</code> from the number of seconds since …\nMakes a new <code>NaiveTime</code> from the number of seconds since …\nMakes a new <code>NaiveDateTime</code> corresponding to a UTC date and …\nMakes a new <code>NaiveDateTime</code> corresponding to a UTC date and …\nMakes a new <code>NaiveDate</code> by counting the number of …\nMakes a new <code>NaiveDate</code> by counting the number of …\nMakes a new <code>NaiveDate</code> from the calendar date (year, month …\nMakes a new <code>NaiveDate</code> from the calendar date (year, month …\nMakes a new <code>NaiveDate</code> from the ordinal date (year and day …\nMakes a new <code>NaiveDate</code> from the ordinal date (year and day …\nReturns the hour number from 0 to 23.\nReturns the hour number from 0 to 23.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator that steps by days across all …\nReturns an iterator that steps by weeks across all …\nReturns a date representing the last day of the week.\nReturns the minute number from 0 to 59.\nReturns the minute number from 0 to 59.\nReturns the month number starting from 1.\nReturns the month number starting from 1.\nReturns the month number starting from 0.\nReturns the month number starting from 0.\nReturns the number of nanoseconds since the whole non-leap …\nReturns the number of nanoseconds since the whole non-leap …\nMakes a new <code>NaiveDateTime</code> from date and time components. …\nReturns the number of non-leap seconds past the last …\nReturns the day of year starting from 1.\nReturns the day of year starting from 1.\nReturns the day of year starting from 0.\nReturns the day of year starting from 0.\nAdds given <code>Duration</code> to the current time, and also returns …\nSubtracts given <code>Duration</code> from the current time, and also …\nParses a string with the specified format string and …\nParses a string with the specified format string and …\nParses a string with the specified format string and …\nMakes a new <code>NaiveDate</code> for the previous calendar date.\nMakes a new <code>NaiveDate</code> for the previous calendar date.\nReturns the second number from 0 to 59.\nReturns the second number from 0 to 59.\nSerialization/Deserialization of naive types in alternate …\nSubtracts another <code>NaiveDate</code> from the current date. Returns …\nSubtracts another <code>NaiveDateTime</code> from the current date and …\nSubtracts another <code>NaiveTime</code> from the current time. Returns …\nA subtraction of Months from <code>NaiveDate</code> clamped to valid …\nMakes a new <code>NaiveDate</code> for the next calendar date.\nMakes a new <code>NaiveDate</code> for the next calendar date.\nRetrieves a time component.\nReturns the number of non-leap seconds since the midnight …\nReturns the number of non-leap <em>microseconds</em> since midnight …\nReturns the number of non-leap <em>milliseconds</em> since midnight …\nReturns the number of non-leap <em>nanoseconds</em> since midnight …\nReturns the number of microseconds since the last whole …\nReturns the number of milliseconds since the last whole …\nReturns the number of nanoseconds since the last whole …\nReturns the <code>NaiveWeek</code> that the date belongs to, starting …\nReturns the ISO week number starting from 1.\nReturns the ISO week number starting from 0.\nReturns the day of week.\nReturns the day of week.\nMakes a new <code>NaiveDate</code> with the day of month (starting from …\nMakes a new <code>NaiveDateTime</code> with the day of month (starting …\nMakes a new <code>NaiveDate</code> with the day of month (starting from …\nMakes a new <code>NaiveDateTime</code> with the day of month (starting …\nMakes a new <code>NaiveDateTime</code> with the hour number changed.\nMakes a new <code>NaiveTime</code> with the hour number changed.\nMakes a new <code>NaiveDateTime</code> with the minute number changed.\nMakes a new <code>NaiveTime</code> with the minute number changed.\nMakes a new <code>NaiveDate</code> with the month number (starting from …\nMakes a new <code>NaiveDateTime</code> with the month number (starting …\nMakes a new <code>NaiveDate</code> with the month number (starting from …\nMakes a new <code>NaiveDateTime</code> with the month number (starting …\nMakes a new <code>NaiveDateTime</code> with nanoseconds since the whole …\nMakes a new <code>NaiveTime</code> with nanoseconds since the whole …\nMakes a new <code>NaiveDate</code> with the day of year (starting from …\nMakes a new <code>NaiveDateTime</code> with the day of year (starting …\nMakes a new <code>NaiveDate</code> with the day of year (starting from …\nMakes a new <code>NaiveDateTime</code> with the day of year (starting …\nMakes a new <code>NaiveDateTime</code> with the second number changed.\nMakes a new <code>NaiveTime</code> with the second number changed.\nMakes a new <code>NaiveDate</code> with the year number changed.\nMakes a new <code>NaiveDateTime</code> with the year number changed.\nReturns the year number in the calendar date.\nReturns the year number in the calendar date.\nReturns the year number for this ISO week.\nUsed to serialize/deserialize from microsecond-precision …\nSer/de to/from optional timestamps in microseconds\nUsed to serialize/deserialize from millisecond-precision …\nSer/de to/from optional timestamps in milliseconds\nUsed to serialize/deserialize from nanosecond-precision …\nSer/de to/from optional timestamps in nanoseconds\nUsed to serialize/deserialize from second-precision …\nSer/de to/from optional timestamps in seconds\nDeserialize a <code>NaiveDateTime</code> from a microseconds timestamp\nSerialize a datetime into an integer number of …\nDeserialize a <code>NaiveDateTime</code> from a nanosecond timestamp or …\nSerialize a datetime into an integer number of …\nDeserialize a <code>NaiveDateTime</code> from a milliseconds timestamp\nSerialize a datetime into an integer number of …\nDeserialize a <code>NaiveDateTime</code> from a nanosecond timestamp or …\nSerialize a datetime into an integer number of …\nDeserialize a <code>NaiveDateTime</code> from a nanoseconds timestamp\nSerialize a datetime into an integer number of nanoseconds …\nDeserialize a <code>NaiveDateTime</code> from a nanosecond timestamp or …\nSerialize a datetime into an integer number of nanoseconds …\nDeserialize a <code>NaiveDateTime</code> from a seconds timestamp\nSerialize a datetime into an integer number of seconds …\nDeserialize a <code>NaiveDateTime</code> from a second timestamp or none\nSerialize a datetime into an integer number of seconds …\nGiven local time representation has multiple results and …\nThe time zone with fixed offset, from UTC-23:59:59 to …\nThe local timescale. This is implemented via the standard …\nThe conversion result from the local time to the …\nGiven local time representation is invalid. This can occur …\nThe offset from the local time to UTC.\nAn associated offset type. This type is used to store the …\nGiven local time representation has a single unique result.\nThe time zone.\nThe UTC time zone. This is the most efficient time zone …\nMakes a new <code>DateTime</code> from the current date, hour, minute, …\nMakes a new <code>DateTime</code> from the current date, hour, minute, …\nMakes a new <code>DateTime</code> from the current date, hour, minute, …\nMakes a new <code>DateTime</code> from the current date, hour, minute …\nMakes a new <code>DateTime</code> from the current date and given …\nParses a string with the specified format string and …\nReturns <code>Some</code> for the earliest possible conversion result, …\nMakes a new <code>FixedOffset</code> for the Eastern Hemisphere with …\nMakes a new <code>FixedOffset</code> for the Eastern Hemisphere with …\nReturns the fixed offset from UTC to the local time stored.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts the local <code>NaiveDate</code> to the timezone-aware <code>Date</code> if …\nConverts the local <code>NaiveDateTime</code> to the timezone-aware …\nReconstructs the time zone from the offset.\nConverts the UTC <code>NaiveDate</code> to the local time. The UTC is …\nConverts the UTC <code>NaiveDateTime</code> to the local time. The UTC …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMakes a new <code>Date</code> from ISO week date (year and week …\nMakes a new <code>Date</code> from ISO week date (year and week …\nReturns <code>Some</code> for the latest possible conversion result, or …\nReturns the number of seconds to add to convert from UTC …\nMaps a <code>LocalResult&lt;T&gt;</code> into <code>LocalResult&lt;U&gt;</code> with given …\nReturns a <code>DateTime</code> which corresponds to the current date …\nReturns a <code>DateTime</code> which corresponds to the current date …\nCreates the offset(s) for given local <code>NaiveDate</code> if …\nCreates the offset(s) for given local <code>NaiveDateTime</code> if …\nCreates the offset for given UTC <code>NaiveDate</code>. This cannot …\nCreates the offset for given UTC <code>NaiveDateTime</code>. This …\nReturns <code>Some</code> only when the conversion result is unique, or …\nMakes a new <code>DateTime</code> from the number of non-leap seconds …\nMakes a new <code>DateTime</code> from the number of non-leap …\nMakes a new <code>DateTime</code> from the number of non-leap …\nMakes a new <code>DateTime</code> from the number of non-leap …\nMakes a new <code>DateTime</code> from the number of non-leap seconds …\nReturns a <code>Date</code> which corresponds to the current date.\nReturns a <code>Date</code> which corresponds to the current date.\nReturns the single unique conversion result, or panics …\nReturns the number of seconds to add to convert from the …\nMakes a new <code>FixedOffset</code> for the Western Hemisphere with …\nMakes a new <code>FixedOffset</code> for the Western Hemisphere with …\nMakes a new <code>Date</code> from year, month, day and the current …\nMakes a new <code>Date</code> from year, month, day and the current …\nMakes a new <code>Date</code> from year, day of year (DOY or “ordinal…\nMakes a new <code>Date</code> from year, day of year (DOY or “ordinal…\nSer/de to/from timestamps in microseconds\nSer/de to/from optional timestamps in microseconds\nSer/de to/from timestamps in milliseconds\nSer/de to/from optional timestamps in milliseconds\nSer/de to/from timestamps in nanoseconds\nSer/de to/from optional timestamps in nanoseconds\nSer/de to/from timestamps in seconds\nSer/de to/from optional timestamps in seconds\nDeserialize a <code>DateTime</code> from a microsecond timestamp\nSerialize a UTC datetime into an integer number of …\nDeserialize a <code>DateTime</code> from a microsecond timestamp or none\nSerialize a UTC datetime into an integer number of …\nDeserialize a <code>DateTime</code> from a millisecond timestamp\nSerialize a UTC datetime into an integer number of …\nDeserialize a <code>DateTime</code> from a millisecond timestamp or none\nSerialize a UTC datetime into an integer number of …\nDeserialize a <code>DateTime</code> from a nanosecond timestamp\nSerialize a UTC datetime into an integer number of …\nDeserialize a <code>DateTime</code> from a nanosecond timestamp or none\nSerialize a UTC datetime into an integer number of …\nDeserialize a <code>DateTime</code> from a seconds timestamp\nSerialize a UTC datetime into an integer number of seconds …\nDeserialize a <code>DateTime</code> from a seconds timestamp or none\nSerialize a UTC datetime into an integer number of seconds …")