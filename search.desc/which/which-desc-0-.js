searchState.loadedDescShard("which", 0, "which\nAn owned, immutable wrapper around a <code>PathBuf</code> containing …\nContains the error value\nContains the success value\nAn owned, immutable wrapper around a <code>PathBuf</code> containing …\nReturns the paths of all executable binaries by a name.\nReturns the canonical paths of an executable binary by …\nReturns all paths of an executable binary by name in the …\nReturns all of the canonical paths of an executable binary …\nReturns a reference to a <code>std::path::Path</code>.\nReturns a reference to a <code>std::path::Path</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>which::Path</code>, yielding its underlying …\nConsumes the <code>which::CanonicalPath</code>, yielding its underlying …\nReturns the path of an executable binary by name.\nReturns the canonical path of an executable binary by name.\nReturns the path of an executable binary by name in the …\nReturns the canonical path of an executable binary by name …\nFind a exectable binary’s path by name.\nFind all binaries with <code>binary_name</code> in the path list <code>paths</code>, …\nFind <code>binary_name</code> in the path list <code>paths</code>, using <code>cwd</code> to …\nFind all binaries with <code>binary_name</code> in the path list <code>paths</code>, …")